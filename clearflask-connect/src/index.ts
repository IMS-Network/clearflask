import greenlockExpress from 'greenlock-express';
import httpp from 'http-proxy';
import connectConfig from './config';
import httpx from './httpx';

// const reactRenderer = require('./react-renderer');
// const routes = ['/', '/page'];

/**
 * initialize the application and create the routes
 */
// const app = express();

/** 
 * "/path-in-out-routes-arr" should always serve our server rendered page;
 * otherwise, continue with next handlers 
 * 
 * TODO: for now, no SSR, just GreenLock
 */
// app.get('/*', reactRenderer.render(routes));

/**
 * Set the location of the static assets (ie the js bundle generated by webapck)
 */
// app.use(express.static(path.resolve(__dirname, '../build')))
// app.use(express.static(path.resolve(__dirname, '../public')))

/**
 * Since this is the last non-error-handling
 * middleware use()d, we assume 404, as nothing else
 * responded.
 * 
 * TODO: for now, no SSR, just GreenLock
 */
// app.use(reactRenderer.render(routes));

// app.listen(PORT, () => console.log(`Example app listening on port ${PORT}!`));


// Eventyually proxy things over:
// https://git.coolaj86.com/coolaj86/greenlock-express.js/src/branch/master/examples/http-proxy/server.js

greenlockExpress
  .init({
    agreeToTerms: true,
    renewOffset: "-45d",
    renewStagger: "15d",
    packageRoot: process.cwd(),
    configDir: './greenlock.d',
    packageAgent: 'clearflask/1.0',
    maintainerEmail: connectConfig.email,
    subscriberEmail: connectConfig.email,

    cluster: true,

    debug: true,

    manager: {
      module: `${process.cwd()}/src/greenlock/greenlock-manager-clearflask.js`
    },
    store: {
      module: `${process.cwd()}/src/greenlock/greenlock-store-clearflask.js`
    },
    challenges: {
      "http-01": {
        module: `${process.cwd()}/src/greenlock/greenlock-challenge-http-clearflask.js`,
      },
    },

    notify: (event, details) => {
      console.log('EVENT:', event, details);
    },
  })
  .ready(worker)
  .master(function () {
    console.log('Master Started');
  });

function worker(glx) {
  // Proxy
  const serverHttpp = httpp.createProxyServer({ xfwd: true });
  serverHttpp.on("error", function (err, req, res) {
    console.error(err);
    res.statusCode = 500;
    res.end();
    return;
  });

  // Http
  const serverHttp = glx.httpServer();

  // Https
  const serverHttps = glx.httpsServer(null, (req, res) => {
    serverHttpp.web(req, res, {
      target: "http://localhost:8080"
    });
  });
  serverHttps.on("upgrade", function (req, socket, head) {
    serverHttpp.ws(req, socket, head, {
      ws: true,
      target: "ws://localhost:8080"
    });
  });

  // Http(s)
  const serverHttpx = httpx.createServer(serverHttp, serverHttps);
  serverHttpx.listen(connectConfig.listenPort, () => {
    console.info("Http(s) on", connectConfig.listenPort);
  });

  // App
  serverHttp.listen(9080, "0.0.0.0", function() {
    console.info("Http on", serverHttp.address().port);
  });
  serverHttps.listen(9443, "0.0.0.0", function() {
    console.info("Https on", serverHttps.address().port);
  });
}
