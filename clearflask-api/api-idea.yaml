
components:
  schemas:
    IdeaSearch:
      x-clearflask-prop: { order: 100, name: 'Filter', description: 'Custom filter to limit the ideas shown to the user' }
      type: object
      properties:
        sortBy:
          x-clearflask-prop: { name: 'Sort', description: 'Display ideas sorted' }
          type: string
          enum: 
            - Trending
            - Top
            - New
        filterCategoryIds:
          x-clearflask-prop: { name: 'Group', description: 'Display only ideas from these groups' }
          x-clearflask-prop-link: { idPropName: 'categoryId', linkPath: ['content', 'categories'], displayPropName: 'name', colorPropName: 'color'}
          type: array
          items:
            type: string
        filterStatusIds:
          x-clearflask-prop: { name: 'Status', description: 'Display only ideas having these statuses' }
          x-clearflask-prop-link: { idPropName: 'statusId', linkPath: ['content', 'categories', '<>', 'workflow', 'statuses'], displayPropName: 'name', colorPropName: 'color'}
          type: array
          items:
            type: string
        filterTagIds:
          x-clearflask-prop: { name: 'Tag', description: 'Display only ideas having these tags' }
          x-clearflask-prop-link: { idPropName: 'tagId', linkPath: ['content', 'categories', '<>', 'tagging', 'tags'], displayPropName: 'name', colorPropName: 'color'}
          type: array
          items:
            type: string
        searchText:
          x-clearflask-prop: { name: 'Search query', description: 'Optionally set a search query to use' }
          type: string
        limit:
          x-clearflask-prop: { name: 'Limit', description: 'Optionally set a limit on how many results to return' }
          minimum: 1
          maximum: 50
          type: integer
    IdeaSearchAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaSearch'
        - type: object
          properties:
            filterCreatedStart:
              type: string
              format: date-time
            filterCreatedEnd:
              type: string
              format: date-time
            filterLastActivityStart:
              type: string
              format: date-time
            filterLastActivityEnd:
              type: string
              format: date-time
          required:
    Idea:
      type: object
      properties:
        ideaId:
          type: string
        authorUserId:
          type: string
        created:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        categoryId:
          type: string
        statusId:
          type: string
        tagIds:
          type: array
          items:
            type: string
        commentCount:
          type: integer
        funded:
          type: number
        fundGoal:
          type: number
        fundersCount:
          type: integer
        voteValue:
          type: integer
        votersCount:
          type: integer
        expressionsValue:
          description: Combined value of all expressions. Not the expression count.
          type: number
        expressions:
          type: array
          items:
            type: object
            title: ExpressionCounts
            required:
              - display
              - count
            properties:
              display:
                type: string
              count:
                type: integer
      required:
        - ideaId
        - authorUserId
        - created
        - title
        - categoryId
        - tagIds
    IdeaWithAuthor:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/Idea'
        - type: object
          required:
           - author
          properties:
            author:
              $ref: 'api-user.yaml#/components/schemas/User'
    IdeaAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/Idea'
        - type: object
          properties:
          required:
    IdeaWithAuthorAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaAdmin'
        - type: object
          required:
           - author
          properties:
            author:
              $ref: 'api-user.yaml#/components/schemas/User'
    IdeaCreate:
      type: object
      properties:
        authorUserId:
          type: string
        title:
          type: string
        description:
          type: string
        categoryId:
          type: string
        tagIds:
          type: array
          items:
            type: string
      required:
        - authorUserId
        - title
        - categoryId
        - tagIds
    IdeaCreateAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaCreate'
        - type: object
          properties:
            created:
              type: string
              format: date-time
            statusId:
              type: string
            creditGoal:
              type: number
          required:
    IdeaUpdate:
      type: object
      properties:
        description:
          type: string
        tagIds:
          type: array
          items:
            type: string
    IdeaUpdateAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaCreate'
        - type: object
          properties:
            title:
              type: string
            categoryId:
              type: string
            tagIds:
              type: array
              items:
                type: string
            creditGoal:
              type: number

/project/{projectId}/idea:
  get:
    operationId: ideaSearch
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: cursor
        in: query
        schema:
          $ref: 'api-client.yaml#/components/schemas/Cursor'
      - name: search
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaSearch'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: IdeaSearchResponse
              type: object
              properties:
                cursor:
                  $ref: 'api-client.yaml#/components/schemas/Cursor'
                results:
                  type: array
                  items:
                    $ref: 'api-idea.yaml#/components/schemas/IdeaWithAuthor'
              required:
                - results
  post:
    operationId: ideaCreate
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: create
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaCreate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/Idea'
/project/{projectId}/idea/{ideaId}:
  get:
    operationId: ideaGet
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaWithAuthor'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  patch:
    operationId: ideaUpdate
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
      - name: update
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaUpdate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/Idea'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  delete:
    operationId: ideaDelete
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/admin/idea:
  get:
    operationId: ideaSearchAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: cursor
        in: query
        schema:
          $ref: 'api-client.yaml#/components/schemas/Cursor'
      - name: search
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaSearchAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: IdeaSearchResponse
              type: object
              properties:
                cursor:
                  $ref: 'api-client.yaml#/components/schemas/Cursor'
                results:
                  type: array
                  items:
                    $ref: 'api-idea.yaml#/components/schemas/IdeaWithAuthorAdmin'
              required:
                - results
  post:
    operationId: ideaCreateAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: idea
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaCreateAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaAdmin'
  delete:
    operationId: ideaDeleteBulkAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaSearchAdmin'
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/admin/idea/{ideaId}:
  get:
    operationId: ideaGetAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaWithAuthorAdmin'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  patch:
    operationId: ideaUpdateAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
      - name: update
        in: query
        required: true
        schema:
          $ref: 'api-idea.yaml#/components/schemas/IdeaUpdateAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaAdmin'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  delete:
    operationId: ideaDeleteAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
