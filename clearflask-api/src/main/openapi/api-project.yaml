components:
  schemas:
    Config:
      x-clearflask-page: { name: 'Project', description: 'These are your project settings. You can preview your changes on the right hand side, but keep in mind the preview is manipulating live data. Publish when you are ready.', nameFromProp: 'name' }
      description: Config properties visible both to client app and admins.
      type: object
      required:
        - test
        - projectId
        - name
        - slug
        - layout
        - content
        - style
        - users
      properties:
        # TODO remove test page
        # test:
        #   $ref: 'api-test.yaml#/components/schemas/ConfigTest'
        projectId:
          x-clearflask-prop: { subType: 'id' }
          type: string
        website:
          x-clearflask-prop: { order: 2, name: 'Website', description: 'Your website; used for linking your users back to your website.', placeholder: 'https://' }
          type: string
        name:
          x-clearflask-prop: { order: 1, name: 'Name', description: 'Project name, typically your organization name' }
          type: string
        logoUrl:
          x-clearflask-prop: { order: 3, name: 'Logo', description: 'Add your logo with a url. (ie: "https://example.com/favicon.ico")', placeholder: 'https://' }
          description: Location of the logo to display.
          type: string
        slug:
          x-clearflask-prop: { order: 4, name: 'Slug', description: 'Url subdomain of your project. (ie: "https://<slug>.clearflask.com") During migration, your old slug will be guaranteed to be accessible for 24hrs.' }
          type: string
        layout:
          $ref: 'api-project.yaml#/components/schemas/layout'
        content:
          $ref: 'api-project.yaml#/components/schemas/content'
        style:
          $ref: 'api-project.yaml#/components/schemas/style'
        users:
          $ref: 'api-project.yaml#/components/schemas/users'
    credits:
      x-clearflask-page: { order: 13, name: 'Credits', description: 'Enable funding using virtual credits' }
      title: CreditFormatter
      type: object
      required:
        - formats
      properties:
        formats:
          x-clearflask-prop: { order: 1, name: 'Display rules', description: '
            Your base currency value will be displayed to your users based on the following rules in order:
            1/ "Range" matching a value.
            2/ The credits will be multiplied by the Multiplier.
            3/ rounded based on significant digits.
            4/ Finally prefixed and suffixed.' }
          type: array
          items:
            title: CreditFormatterEntry
            type: object
            properties:
              greaterOrEqual:
                x-clearflask-prop: { order: 3, name: 'Range: Greater than or equal', description: 'Applies this format only if credit value is greater than or equal to this value' }
                type: integer
                format: int64
              lessOrEqual:
                x-clearflask-prop: { order: 4, name: 'Range: Less than or equal', description: 'Applies this format only if credit value is less than or equal to this value' }
                type: integer
                format: int64
              multiplier:
                x-clearflask-prop: { order: 5, name: 'Multiplier', description: 'Multiply value before displaying' }
                type: number
                format: double
              minimumFractionDigits:
                x-clearflask-prop: { order: 6, name: 'Min decimals', description: 'Minimum amount of decimals to display regardless of value' }
                type: integer
                format: int64
              maximumFractionDigits:
                x-clearflask-prop: { order: 7, name: 'Max decimals', description: 'Maximum amount of decimals to display regardless of value' }
                type: integer
                format: int64
              prefix:
                x-clearflask-prop: { order: 1, name: 'Prefix', description: 'Text to prepend before the value' }
                type: string
              suffix:
                x-clearflask-prop: { order: 2, name: 'Suffix', description: 'Text to append after the value' }
                type: string
    users:
      x-clearflask-page: { order: 14, name: 'Users', description: 'Onboarding and authentication.' }
      title: Users
      type: object
      required:
        - displayName
        - onboarding
      properties:
        credits:
          $ref: 'api-project.yaml#/components/schemas/credits'
        onboarding:
          x-clearflask-page: { order: 15, name: 'Onboarding', description: 'Define how users can sign up before posting' }
          title: Onboarding
          type: object
          required:
            - accountFields
            - notificationMethods
          properties:
            accountFields:
              x-clearflask-prop: { order: 1, name: 'Account fields', description: 'List of fields to collect during sign-up. It is recommended to keep this at a minimum to minimize friction.' }
              title: AccountFields
              type: object
              required:
                - displayName
              properties:
                displayName:
                  x-clearflask-prop: { order: 1, name: 'Display name', defaultValue: 'None' }
                  type: string
                  enum: [None, Optional, Required]
            notificationMethods:
              x-clearflask-prop: { order: 2, name: 'Collection methods', description: 'Various channels users can use to sign up and be notified of updates. The most valuable feedback comes from users that want to hear back from you.' }
              title: NotificationMethods
              type: object
              required:
                - browserPush
              properties:
                anonymous:
                  x-clearflask-prop: { order: 1, name: 'Anonymous', defaultValue: false, description: 'Allow users to sign up with no contact. Not recommended in most cases as it invites feedback from users that do not care about the outcome.' }
                  type: object
                  title: AnonymousSignup
                  required:
                    - onlyShowIfPushNotAvailable
                  properties:
                    onlyShowIfPushNotAvailable:
                      x-clearflask-prop: { order: 1, name: 'Fallback', defaultValue: false, description: 'If enabled, only allow anonymous signup if no other option is available. Typically combined with Browser Notifications which are not available on all browsers.' }
                      type: boolean
                browserPush:
                  x-clearflask-prop: { order: 2, name: 'Browser Notification', defaultValue: true }
                  type: boolean
                email:
                  x-clearflask-prop: { order: 3, name: 'Email', defaultValue: true, description: 'Most common way to keep users notified.' }
                  type: object
                  title: EmailSignup
                  required:
                    - password
                  properties:
                    password:
                      x-clearflask-prop: { order: 1, name: 'Password', defaultValue: 'None', description: 'Allows you to ask for a password during sign up. Asking for a password increases friction. It is recommended to let users set a password after sign up.' }
                      type: string
                      enum: [None, Optional, Required]
                sso:
                  x-clearflask-prop: { order: 4, name: 'Single Sign-On', description: 'Authenticate users seamlessly between your service and ClearFlask.' }
                  x-clearflask-additional-props: { propPaths: [['ssoSecretKey']] }
                  type: object
                  title: SsoSignup
                  required:
                  - redirectUrl
                  properties:
                    buttonTitle:
                      x-clearflask-prop: { order: 1, name: 'Short button title', description: 'Optionally set the user-visible button title, typically with the name of your service or auth provider.' }
                      type: string
                    redirectUrl:
                      x-clearflask-prop: { order: 1, name: 'Redirect URL', placeholder: 'https://example.com/login?r=<return_uri>', description: 'During login, user will be redirected to this URL to login to your service. Parameter <return_uri> will be replaced by return path you should redirect to. Follow the Single Sign-On instructions to set this up properly.' }
                      type: string
            terms:
              x-clearflask-prop: { order: 2, name: 'Custom Terms', description: 'Override default ClearFlask Privacy and Terms of Service policies during user sign-up with custom documents.' }
              title: CustomTerms
              type: object
              required:
                - documents
              properties:
                documents:
                  x-clearflask-prop: { order: 1, name: 'Documents', description: 'List of documents to show during sign-up. Leave blank to show no terms.' }
                  type: array
                  items:
                    x-clearflask-prop: { name: 'Object', description: 'Document' }
                    type: object
                    properties:
                      shortName:
                        x-clearflask-prop: { order: 1, name: 'name', description: 'Name of document.', placeholder: 'Terms of Service' }
                        type: string
                      name:
                        x-clearflask-prop: { order: 2, name: 'name', description: 'Short name.', placeholder: 'Terms' }
                        type: string
                      link:
                        x-clearflask-prop: { order: 3, name: 'link', description: 'Link to your document', placeholder: 'https://example.com/terms-of-service' }
                        type: string
    style:
      x-clearflask-page: { order: 19, name: 'Style', description: 'Adjust the look and feel to match your style.' }
      title: Style
      type: object
      required:
        - palette
        - typography
        - animation
      properties:
        animation:
          x-clearflask-prop: { order: 1, name: 'Animation', description: 'Control all animations across this project. Turn off for faster and sharper look.' }
          title: Flow
          type: object
          required:
            - enableTransitions
          properties:
            enableTransitions:
              x-clearflask-prop: { order: 1, name: 'Enable animation', defaultValue: true }
              type: boolean
        palette:
          x-clearflask-prop: { order: 2, name: 'Palette' }
          title: Palette
          type: object
          required:
            - darkMode
          properties:
            darkMode:
              x-clearflask-prop: { order: 1, name: 'Dark mode' }
              type: boolean
            primary:
              x-clearflask-prop: { order: 2, subType: 'color', name: 'Primary color' }
              type: string
              pattern: '^(#([\da-f]{1,2}){3}|(rgba?|hsla?)\([\d, ]+\))$'
            secondary:
              x-clearflask-prop: { order: 3, subType: 'color', name: 'Secondary color' }
              type: string
              pattern: '^(#([\da-f]{1,2}){3}|(rgba?|hsla?)\([\d, ]+\))$'
            text:
              x-clearflask-prop: { order: 4, subType: 'color', name: 'Text color' }
              type: string
              pattern: '^(#([\da-f]{1,2}){3}|(rgba?|hsla?)\([\d, ]+\))$'
            background:
              x-clearflask-prop: { order: 5, subType: 'color', name: 'Background color' }
              type: string
              pattern: '^(#([\da-f]{1,2}){3}|(rgba?|hsla?)\([\d, ]+\))$'
            backgroundPaper:
              x-clearflask-prop: { order: 6, subType: 'color', name: 'Inner background color' }
              type: string
              pattern: '^(#([\da-f]{1,2}){3}|(rgba?|hsla?)\([\d, ]+\))$'
            expressionColor:
              x-clearflask-prop: { order: 7, name: 'Expression color' }
              type: string
              enum: [Color, Washed, Gray]
            funding:
              x-clearflask-prop: { order: 8, subType: 'color', name: 'Funding progress bar color' }
              type: string
              pattern: '^(#([\da-f]{1,2}){3}|(rgba?|hsla?)\([\d, ]+\))$'
        typography:
          x-clearflask-prop: { order: 3, name: 'Typography' }
          title: Typography
          type: object
          properties:
            fontFamily:
              x-clearflask-prop: { order: 1, name: 'Font Family', placeholder: '"Times New Roman", Times, serif' }
              type: string
            fontSize:
              x-clearflask-prop: { order: 2, name: 'Font Size', placeholder: '14' }
              type: number
              format: double
    support:
      x-clearflask-page: { order: 4, name: 'Feedback', description: 'Choose type of user feedback to allow for this category including funding, voting, expressions and comments.' }
      title: Support
      type: object
      required:
        - fund
        - comment
      properties:
        fund:
          x-clearflask-prop: { order: 1, name: 'Fund', description: 'Allow users to spend their credits. May be further disallowed based on workflow state. You must also setup credit system for this project.' }
          type: boolean
        vote:
          x-clearflask-prop: { order: 3, name: 'Vote', description: 'Simple and standard voting mechanism for users to quickly express feedback.' }
          title: Voting
          type: object
          required:
            - enableDownvotes
          properties:
            enableDownvotes:
              x-clearflask-prop: { order: 1, name: 'Downvote', description: 'Also allow down-voting. Consider carefully whether this type of feedback is valuable to your content.' }
              type: boolean
        express:
          x-clearflask-prop: { order: 4, name: 'Expression', description: 'When you need a wider range of emotions to express feedback, weighted emojis are here to help.' }
          title: Expressing
          type: object
          required:
          - limitEmojiPerIdea
          properties:
            limitEmojiPerIdea:
              x-clearflask-prop: { order: 1, name: 'Only one', description: 'If set, a user can only set a single emoji per content.', defaultValue: true }
              type: boolean
            limitEmojiSet:
              x-clearflask-prop: { order: 2, name: 'Whitelist', description: 'Define a list of allowed emojis that can be displayed. Optionally specify the weight of each emoji' }
              type: array
              items:
                x-clearflask-prop: { order: 1, name: 'Emojis' }
                title: Expression
                type: object
                required:
                  - expressionId
                  - weight
                  - display
                  - text
                properties:
                  display:
                    x-clearflask-prop: { order: 1, subType: 'emoji', name: 'Display', description: 'Select an emoji from our emoji-picker to be displayed to user.' }
                    description: Must be unique, used as an ID
                    type: string
                  text:
                    x-clearflask-prop: { order: 2, name: 'Label', description: 'Descriptive text representation of emoji. (Ie: Snowman, Happy face) Used for accessibility.' }
                    type: string
                  weight:
                    x-clearflask-prop: { order: 3, name: 'Weight', description: 'Unitless weight associated with Emoji. Used for prioritization, sorting and filtering.' }
                    type: number
                    format: double
        comment:
          x-clearflask-prop: { order: 5, name: 'Comments', description: 'Allow users to post comments', defaultValue: true }
          type: boolean
    layout:
      x-clearflask-page: { order: 12, name: 'Layout', description: 'Customize pages and top menu.' }
      title: Layout
      type: object
      required:
        - pages
        - menu
      properties:
        menu:
          x-clearflask-prop: { order: 2, name: 'Top Menu', description: 'Customize the top menu wiht tabs. Each tab can be a link to single page or a dropdown with multiple pages.' }
          type: array
          items:
            title: Menu
            type: object
            required:
              - menuId
              - pageIds
            properties:
              menuId:
                x-clearflask-prop: { subType: 'id' }
                type: string
              pageIds:
                x-clearflask-prop: { order: 2, name: 'Tab links', description: 'Pages this tab will link to. If more than one, a dropdown will be displayed.' }
                x-clearflask-prop-link: { idPropName: 'pageId', linkPath: ['layout', 'pages'], displayPropName: 'name'}
                type: array
                items:
                  type: string
              name:
                x-clearflask-prop: { order: 1, name: 'Tab title', description: 'Title to display. Defaults to page name if only a single page is linked' }
                type: string
        pages:
          x-clearflask-page-group: { order: 1, name: 'Pages', tablePropertyNames:['name', 'slug'], description: 'List of all pages. After creating a page, you may add the page to the menu below.'}
          type: array
          items:
            x-clearflask-page: { name: 'Page', description: 'Create and customize this page. Each page typically consists of one or more of the four components: description, panels, board and explorer.', nameFromProp: 'name' }
            title: Page
            type: object
            required:
              - pageId
              - name
              - slug
              - components
              - panels
            properties:
              pageId:
                x-clearflask-prop: { subType: 'id' }
                type: string
              name:
                x-clearflask-prop: { defaultValue: 'Page <>', order: 1, name: 'Page name', description: 'Page name shown on links and buttons. Keep it short as it is used in tight spaces.', slugAutoComplete:{path: ['.', 'slug'], skipFirst: 2} }
                type: string
              slug:
                x-clearflask-prop: { order: 2, name: 'Slug', description: 'Text to display in the URL part of this page. Leave blank for home page.' }
                type: string
              title:
                x-clearflask-prop: { order: 3, name: 'Title', description: 'Main title visible on the tab and as first text on this page', placeholder: 'Feature Requests' }
                type: string
              description:
                x-clearflask-prop: { order: 4, name: 'Description', description: 'Description of this page visible just below the title', placeholder: 'Submit your...' }
                type: string
              panels:
                x-clearflask-page-group: { order: 5, name: 'Panels', description: 'Horizontal panels of ideas. Typically used for featuring specific types of ideas such as currently funding ideas', tablePropertyNames:['title'] }
                type: array
                items:
                  $ref: 'api-project.yaml#/components/schemas/PagePanelWithHideIfEmpty'
              board:
                $ref: 'api-project.yaml#/components/schemas/PageBoard'
              explorer:
                $ref: 'api-project.yaml#/components/schemas/PageExplorer'
    workflow:
      x-clearflask-page: { order: 5, name: 'Workflow',description: 'Workflow defines the lifetime of content by defining a set of states and transitions between those states. As an example, a user submitted idea may start as "Under Review" state. A product manager may then transition the idea to "Planned" or "Declined". Each state may impose restrictions on voting, commenting and editing.', nameFromProp: 'name' }
      title: Workflow
      type: object
      required:
        - statuses
      properties:
        entryStatus:
          x-clearflask-prop: { order: 2, name: 'Entry status', description: 'First status to assign newly created items' }
          x-clearflask-prop-link: { idPropName: 'statusId', linkPath: ['.', 'statuses'], displayPropName: 'name', colorPropName: 'color'}
          type: string
        statuses:
          x-clearflask-page-group: { order: 3, name: 'Statuses', description: 'List of statuses an idea can be in.', tablePropertyNames:['name', 'color', 'nextStatusIds'] }
          type: array
          items:
            x-clearflask-page: { name: 'Status', nameFromProp: 'name', colorFromProp: 'color' }
            title: IdeaStatus
            type: object
            required:
              - statusId
              - name
              - disableFunding
              - disableVoting
              - disableExpressions
              - disableIdeaEdits
              - disableComments
            properties:
              statusId:
                x-clearflask-prop: { subType: 'id' }
                type: string
              name:
                x-clearflask-prop: { order: 1, defaultValue: 'Status <>', name: 'Name', description: 'Display name shown to user', placeholder: 'In Progress' }
                type: string
              nextStatusIds:
                x-clearflask-prop: { order: 3, name: 'Next Statuses', description: 'List of statuses that can be transitioned to from this status' }
                x-clearflask-prop-link: { idPropName: 'statusId', linkPath: ['..', '..', 'statuses'], displayPropName: 'name', colorPropName: 'color'}
                type: array
                items:
                  type: string
              color:
                x-clearflask-prop: { order: 2, subType: 'color', name: 'Color', description: 'Display color' }
                type: string
              disableFunding:
                x-clearflask-prop: { order: 4, name: 'Disable Funding', description: 'Overrides parent settings to disable funding during this status' }
                type: boolean
              disableVoting:
                x-clearflask-prop: { order: 5, name: 'Disable Voting', description: 'Overrides parent settings to disable voting during this status' }
                type: boolean
              disableExpressions:
                x-clearflask-prop: { order: 5, name: 'Disable Expressions', description: 'Overrides parent settings to disable expressions during this status' }
                type: boolean
              disableIdeaEdits:
                x-clearflask-prop: { order: 6, name: 'Disable Editing', description: 'Overrides parent settings to disable editing of the idea during this status' }
                type: boolean
              disableComments:
                x-clearflask-prop: { order: 7, name: 'Disable Commenting', description: 'Overrides parent settings to disable commenting during this status' }
                type: boolean
    tagging:
      x-clearflask-page: { order: 6, name: 'Tagging', description: 'Tags allow you to group content into categories. These categories can be used to for searching and filtering throughout the project.' }
      title: Tagging
      type: object
      required:
        - tags
        - tagGroups
      properties:
        tags:
          x-clearflask-prop: { order: 1, name: 'Tags', description: 'List of all tags for this content. Consider carefully the tags you want to use: do not fragment your content into unnecessary and unpopular tags. You can always introduce additional tags later.' }
          type: array
          items:
            title: Tag
            type: object
            required:
              - tagId
              - name
            properties:
              tagId:
                x-clearflask-prop: { subType: 'id' }
                type: string
              name:
                x-clearflask-prop: { defaultValue: 'Tag <>', order: 1, name: 'Tag Name', description: "Keep it short since it's used in tight spaces" }
                type: string
              color:
                x-clearflask-prop: { subType: 'color', order: 2, name: 'Color', description: 'Assign a color for displaying this tag' }
                type: string
        tagGroups:
          x-clearflask-page-group: { order: 2, name: 'Tag Groups', description: 'Combine multiple tags into a single group. Allows you to apply restrictions such as only be able to select a specific amount of tags within a group.', tablePropertyNames:['name', 'tagIds'] }
          type: array
          items:
            x-clearflask-page: { order: 5, name: 'Tag Group', nameFromProp: 'name' }
            title: TagGroup
            type: object
            required:
              - tagGroupId
              - name
              - userSettable
              - tagIds
            properties:
              tagGroupId:
                x-clearflask-prop: { subType: 'id' }
                type: string
              name:
                x-clearflask-prop: { order: 1, defaultValue: 'Tag Group <>', name: 'Group Name', description: "Keep it short since it's used in tight spaces." }
                type: string
              minRequired:
                x-clearflask-prop: { order: 2, name: 'Minimum required', description: 'Minimum number of tags in this group that need to be chosen by user' }
                type: integer
                format: int64
              maxRequired:
                x-clearflask-prop: { order: 3, name: 'Maximum required', description: 'Maximum number of tags in this group that can be chosen by user' }
                type: integer
                format: int64
              userSettable:
                x-clearflask-prop: { order: 4, name: 'User settable', description: 'Tags in this group can be set by the user', defaultValue: true }
                type: boolean
              tagIds:
                x-clearflask-prop: { order: 5, name: 'Tags', description: 'These tags belong in this group' }
                x-clearflask-prop-link: { idPropName: 'tagId', linkPath: ['..', '..', 'tags'], displayPropName: 'name', colorPropName: 'color'}
                type: array
                items:
                  type: string
    content:
      x-clearflask-page: { order: 10, name: 'Content', description: 'Define unique content categories here such as user idea, blog entry, forum post, or knowledge article. Each category has its own defined prioritization, workflow and tagging.' }
      title: Content
      type: object
      required:
        - categories
      properties:
        categories:
          x-clearflask-page-group: { order: 2, name: 'Categories', tablePropertyNames:['name', 'color', 'userCreatable'], disableReordering: true }
          type: array
          items:
            x-clearflask-page: { name: 'Category', nameFromProp: 'name', colorFromProp: 'color' }
            title: Category
            type: object
            required:
              - categoryId
              - name
              - userCreatable
              - workflow
              - support
              - tagging
              - visibility
            properties:
              categoryId:
                x-clearflask-prop: { subType: 'id' }
                type: string
              name:
                x-clearflask-prop: { defaultValue: 'Category <>', order: 1, name: 'Name', description: 'Category name. Keep it short as the name is visible in tight spaces.' }
                type: string
              color:
                x-clearflask-prop: { subType: 'color', order: 2, name: 'Color', description: 'Optional display color to associate with this category' }
                type: string
              userCreatable:
                x-clearflask-prop: { order: 4, name: 'User creatable', description: 'Whether content under this category can be created by users', defaultValue: true }
                type: boolean
              workflow:
                $ref: 'api-project.yaml#/components/schemas/workflow'
              support:
                $ref: 'api-project.yaml#/components/schemas/support'
              tagging:
                $ref: 'api-project.yaml#/components/schemas/tagging'
    ConfigAdmin:
      description: >-
        All Config properties available for admins.
        Used for both reading and writing.
      allOf:
        - $ref: 'api-project.yaml#/components/schemas/Config'
        - type: object
          properties:
            ssoSecretKey:
              x-clearflask-hide: true
              x-clearflask-prop: { subType: 'keygen', order: 2, name: 'Secret Key', description: 'Secret Key for signing JWT tokens. Do not publicly expose.' }
              type: string
    PageBoard:
      x-clearflask-page: { order: 6, name: 'Board', description: 'Series of vertical panels of ideas. Typically used for displaying a roadmap with panels such as: Planned, In progress, Completed.' }
      type: object
      properties:
        title:
          x-clearflask-prop: { order: 1, name: 'Board title'}
          type: string
        panels:
          x-clearflask-page-group: { order: 3, name: 'Panels', description: 'Horizontal panels of ideas. Typically used for featuring specific types of ideas such as currently funding ideas', tablePropertyNames:['title'] }
          type: array
          items:
            $ref: 'api-project.yaml#/components/schemas/PagePanelWithHideIfEmpty'
      required:
        - panels
    PostDisplay:
      x-clearflask-prop: { order: 200, name: 'Customize look', description: 'Customize how this panel should look. The default look is automatically determined.', defaultValue: true}
      type: object
      title: PanelDisplay
      properties:
        titleTruncateLines:
          x-clearflask-prop: { order: 1, name: 'Title lines', description: 'Maximum number of lines to display for title otherwise an elipsis will be shown.', placeholder: 1}
          type: integer
          format: int64
          minimum: 1
        descriptionTruncateLines:
          x-clearflask-prop: { order: 2, name: 'Description lines', description: 'Maximum number of lines to display for description otherwise an elipsis will be shown. Set to zero to hide.', placeholder: 2}
          type: integer
          format: int64
          minimum: 0
        responseTruncateLines:
          x-clearflask-prop: { order: 2, name: 'Response lines', description: 'Maximum number of lines to display for a response otherwise an elipsis will be shown. Set to zero to hide.', placeholder: 1}
          type: integer
          format: int64
          minimum: 0
        showCommentCount:
          x-clearflask-prop: { order: 5, name: 'Comment count', description: 'Force show/hide the comment count' }
          type: boolean
        showCategoryName:
          x-clearflask-prop: { order: 6, name: 'Category', description: 'Force show/hide the category name' }
          type: boolean
        showCreated:
          x-clearflask-prop: { order: 7, name: 'Created', description: 'Force show/hide the created timestamp' }
          type: boolean
        showAuthor:
          x-clearflask-prop: { order: 8, name: 'Author', description: "Force show/hide the author's name" }
          type: boolean
        showStatus:
          x-clearflask-prop: { order: 9, name: 'Status', description: 'Force show/hide the status' }
          type: boolean
        showTags:
          x-clearflask-prop: { order: 10, name: 'Tags', description: 'Force show/hide tags' }
          type: boolean
        showVoting:
          x-clearflask-prop: { order: 11, name: 'Voting', description: 'Force show/hide voting arrows' }
          type: boolean
        showFunding:
          x-clearflask-prop: { order: 12, name: 'Funding', description: 'Force show/hide the funding bar' }
          type: boolean
        showExpression:
          x-clearflask-prop: { order: 13, name: 'Expressions', description: 'Force show/hide the expressions' }
          type: boolean
    PagePanel:
      x-clearflask-page: { name: 'Panel', nameFromProp: 'title' }
      type: object
      required:
        - search
        - display
      properties:
        title:
          x-clearflask-prop: { order: 1, name: 'Panel title', description: 'Title to display above the panel'}
          type: string
        search:
          $ref: 'api-idea.yaml#/components/schemas/IdeaSearch'
        display:
          $ref: 'api-project.yaml#/components/schemas/PostDisplay'
    PagePanelWithHideIfEmpty:
      allOf:
        - $ref: 'api-project.yaml#/components/schemas/PagePanel'
        - type: object
          x-clearflask-page: { order: 7, name: 'Panel', nameFromProp: 'title' }
          required:
            - hideIfEmpty
          properties:
            hideIfEmpty:
              x-clearflask-prop: { order: 2, name: 'Hide if empty', description: 'If this panel search has no results, it will be hidden', defaultValue: false}
              type: boolean
    PageExplorer:
      allOf:
        - $ref: 'api-project.yaml#/components/schemas/PagePanel'
        - type: object
          x-clearflask-page: { order: 7, name: 'Explorer', nameFromProp: 'title', description: 'An idea explorer with user-defined search criteria as well as an option to submit own idea.' }
          properties:
            allowSearch:
              x-clearflask-prop: { order: 1, name: 'Allow search', defaultValue: true }
              type: object
              required:
              - enableSort
              - enableSearchText
              - enableSearchByCategory
              - enableSearchByStatus
              - enableSearchByTag
              properties:
                enableSort:
                  x-clearflask-prop: { order: 1, name: 'Sort', description: 'Enable sorting', defaultValue: true}
                  type: boolean
                enableSearchText:
                  x-clearflask-prop: { order: 2, name: 'Type to search', description: 'Enable searching by text', defaultValue: true}
                  type: boolean
                enableSearchByCategory:
                  x-clearflask-prop: { order: 3, name: 'Category', description: 'Enable filtering by categories if present', defaultValue: true}
                  type: boolean
                enableSearchByStatus:
                  x-clearflask-prop: { order: 4, name: 'Status', description: 'Enable filtering by statuses if present', defaultValue: true}
                  type: boolean
                enableSearchByTag:
                  x-clearflask-prop: { order: 5, name: 'Tag', description: 'Enable filtering by tags if present', defaultValue: true}
                  type: boolean
            allowCreate:
              x-clearflask-prop: { order: 2, name: 'Allow creating', defaultValue: true }
              type: object
              properties:
                actionTitle:
                  x-clearflask-prop: { order: 1, name: 'Action title', description: 'Short title to display to user. (Examples: "Add", "Suggest", "Report")', placeholder: 'Add'}
                  type: string
                actionTitleLong:
                  x-clearflask-prop: { order: 1, name: 'Action title (Long)', description: 'Optional short title to display to user. (Examples: "Add new post", "Suggest an idea", "Report a bug")', placeholder: 'Add new post'}
                  type: string
    VersionedConfig:
      type: object
      required:
        - version
        - config
      properties:
        config:
          $ref: 'api-project.yaml#/components/schemas/Config'
        version:
          type: string
    VersionedConfigAdmin:
      type: object
      required:
        - version
        - config
      properties:
        config:
          $ref: 'api-project.yaml#/components/schemas/ConfigAdmin'
        version:
          type: string

/project/{projectId}/config:
  post:
    operationId: configGetAndUserBind
    tags: [Project]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            title: ConfigGetAndUserBind
            properties:
              ssoToken:
                type: string
              authToken:
                type: string
              browserPushToken:
                type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              title: ConfigAndBindResult
              type: object
              required:
              - config
              properties:
                config:
                  $ref: 'api-project.yaml#/components/schemas/VersionedConfig'
                user:
                  $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
/project/config/admin:
  get:
    operationId: configGetAllAdmin
    tags: [ProjectAdmin]
    parameters:
    responses:
      '200':
        content:
          application/json:
            schema:
              title: ConfigGetAllResult
              type: object
              required:
                - configs
              properties:
                configs:
                  type: array
                  items:
                    $ref: 'api-project.yaml#/components/schemas/VersionedConfigAdmin'
/project/admin:
  post:
    operationId: projectCreateAdmin
    tags: [ProjectAdmin]
    parameters:
      - name: projectId
        in: query
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-project.yaml#/components/schemas/ConfigAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: NewProjectResult
              type: object
              required:
                - projectId
                - config
              properties:
                projectId:
                  type: string
                config:
                  $ref: 'api-project.yaml#/components/schemas/VersionedConfigAdmin'
  delete:
    operationId: projectDeleteAdmin
    tags: [ProjectAdmin]
    parameters:
      - name: projectId
        in: query
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
/project/{projectId}/admin/config:
  get:
    operationId: configGetAdmin
    tags: [ProjectAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-project.yaml#/components/schemas/VersionedConfigAdmin'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  put:
    operationId: configSetAdmin
    tags: [ProjectAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: versionLast
        in: query
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-project.yaml#/components/schemas/ConfigAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-project.yaml#/components/schemas/VersionedConfigAdmin'
      '412':
        $ref: 'api-client.yaml#/components/responses/ConfigChanged'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
