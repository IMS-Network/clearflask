// SPDX-FileCopyrightText: 2019-2022 Matus Faro <matus@smotana.com>
// SPDX-License-Identifier: Apache-2.0
/**
 * Inputs:
 *   long decayPeriodInMillis
 *   long timeInMillis
 *   Map<String, Object> extraUpdates
 *   Map<String, Object> extraArrayAdditions
 *   Map<String, Object> extraArrayDeletions
 */

if (params.extraUpdates != null) {
    for (entry in params.extraUpdates.entrySet()) {
        ctx._source[entry.getKey()] = entry.getValue();
    }
}

if (params.extraArrayDeletions != null) {
    for (entry in params.extraArrayDeletions.entrySet()) {
        if (ctx._source[entry.getKey()] != null) {
            ctx._source[entry.getKey()].removeAll(Collections.singleton(entry.getValue()));
        }
    }
}

if (params.extraArrayAdditions != null) {
    for (entry in params.extraArrayAdditions.entrySet()) {
        if (ctx._source[entry.getKey()] == null) {
            ctx._source[entry.getKey()] = new ArrayList();
        }
        ctx._source[entry.getKey()].add(entry.getValue());
    }
}

// See ExpDecayScore.java
double prevTrendScore = ctx._source.trendScore == null ? 0 : ctx._source.trendScore;
double rate = 1d / params.decayPeriodInMillis;
double u = Math.max(prevTrendScore, rate * params.timeInMillis);
double v = Math.min(prevTrendScore, rate * params.timeInMillis);
ctx._source.trendScore = u + Math.log1p(Math.exp(v - u));
