components:
  schemas:
    VoteOption:
      type: string
      enum:
      - upvote
      - downvote
      - none
    FundAmount:
      type: integer
      format: int64
    IdeaVote:
      type: object
      properties:
        vote:
          $ref: 'api-vote.yaml#/components/schemas/VoteOption'
        expression:
          type: array
          title: Expression
          items:
            type: string
        fundAmount:
          $ref: 'api-vote.yaml#/components/schemas/FundAmount'
    IdeaVoteUpdate:
      type: object
      properties:
        fundDiff:
          type: integer
          format: int64
        vote:
          $ref: 'api-vote.yaml#/components/schemas/VoteOption'
        expressions:
          type: object
          required:
          - action
          properties:
            action:
              type: string
              enum:
              - set
              - unset
              - add
              - remove
            expression:
              type: string
    CommentVoteUpdate:
      type: object
      required:
      - vote
      properties:
        vote:
          $ref: 'api-vote.yaml#/components/schemas/VoteOption'


/project/{projectId}/vote/ideas:
  get:
    operationId: ideaVoteGetOwn
    tags: [Vote]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: ideaIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: string
    # For optimizations only, own ideas are not present in bloom filter
    # Need to specify them here in order to fetch votes
    - name: myOwnIdeaIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              title: IdeaVoteGetOwnResponse
              type: object
              required:
              - votesByIdeaId
              - expressionByIdeaId
              - fundAmountByIdeaId
              properties:
                votesByIdeaId:
                  description: Mapping ideaId to vote
                  type: object
                  additionalProperties:
                    $ref: 'api-vote.yaml#/components/schemas/VoteOption'
                expressionByIdeaId:
                  description: Mapping ideaId to expression
                  type: object
                  additionalProperties:
                    type: array
                    title: Expression
                    items:
                      type: string
                fundAmountByIdeaId:
                  description: Mapping ideaId to fundAmount
                  type: object
                  additionalProperties:
                    $ref: 'api-vote.yaml#/components/schemas/FundAmount'
/project/{projectId}/vote/idea/{ideaId}:
  patch:
    operationId: ideaVoteUpdate
    tags: [Vote]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: ideaId
      in: path
      required: true
      schema:
        type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-vote.yaml#/components/schemas/IdeaVoteUpdate'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: IdeaVoteUpdateResponse
              type: object
              required:
              - vote
              - idea
              properties:
                vote:
                  $ref: 'api-vote.yaml#/components/schemas/IdeaVote'
                idea:
                  $ref: 'api-idea.yaml#/components/schemas/Idea'
                balance:
                  $ref: 'api-credit.yaml#/components/schemas/Balance'
                transaction:
                  $ref: 'api-credit.yaml#/components/schemas/Transaction'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/vote/comments:
  get:
    operationId: commentVoteGetOwn
    tags: [Vote]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: commentIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: string
    # For optimizations only, own comments are not present in bloom filter
    # Need to specify them here in order to fetch votes
    - name: myOwnCommentIds
      in: query
      required: true
      schema:
        type: array
        items:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              title: CommentVoteGetOwnResponse
              type: object
              required:
              - votesByCommentId
              properties:
                votesByCommentId:
                  description: Mapping commentId to vote
                  type: object
                  additionalProperties:
                    $ref: 'api-vote.yaml#/components/schemas/VoteOption'
/project/{projectId}/idea/{ideaId}/vote/comment/{commentId}:
  patch:
    operationId: commentVoteUpdate
    tags: [Vote]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: ideaId
      in: path
      required: true
      schema:
        type: string
    - name: commentId
      in: path
      required: true
      schema:
        type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-vote.yaml#/components/schemas/CommentVoteUpdate'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: CommentVoteUpdateResponse
              type: object
              required:
              - vote
              - comment
              properties:
                comment:
                  $ref: 'api-comment.yaml#/components/schemas/CommentWithVote'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/subscribe/category/{categoryId}:
  patch:
    operationId: categorySubscribe
    tags: [Vote]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: categoryId
      in: path
      required: true
      schema:
        type: string
    - name: subscribe
      in: query
      required: true
      schema:
        type: boolean
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserMe'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
