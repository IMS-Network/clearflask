
components:
  schemas:
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UserSearchAdmin:
      type: object
      properties:
        sortBy:
          type: string
          enum:
            - Created
            - LastActive
            - FundedIdeas
            - SupportedIdeas
            - FundedAmount
            - FundsAvailable
        sortOrder:
          type: string
          enum:
            - Asc
            - Desc
        searchText:
          type: string
          description: Search by name and email.
      required:
    User:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
        name:
          type: string
    UserMe:
      allOf:
        - $ref: 'api-user.yaml#/components/schemas/User'
        - type: object
          required:
            - isSso
            - iosPush
            - androidPush
            - browserPush
            - emailNotify
          properties:
            isSso:
              type: boolean
            email:
              type: string
            emailNotify:
              type: boolean
            iosPush:
              type: boolean
            androidPush:
              type: boolean
            browserPush:
              type: boolean
    UserMeWithBalance:
      allOf:
        - $ref: 'api-user.yaml#/components/schemas/UserMe'
        - $ref: 'api-credit.yaml#/components/schemas/Balance'
    UserAdmin:
      allOf:
        - $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
        - type: object
          properties:
            email:
              type: string
            iosPushToken:
              type: string
            androidPushToken:
              type: string
            browserPushToken:
              type: string
    UserCreate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        iosPushToken:
          type: string
        androidPushToken:
          type: string
        browserPushToken:
          type: string
    UserCreateAdmin:
      allOf:
        - $ref: 'api-user.yaml#/components/schemas/UserCreate'
        - type: object
          properties:
    UserUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        emailNotify:
          type: boolean
        iosPushToken:
          type: string
        androidPushToken:
          type: string
        browserPushToken:
          type: string

/project/{projectId}/bind:
  post:
    operationId: userBind
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/login:
  post:
    operationId: userLogin
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: credentials
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserLogin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
/project/{projectId}/delete:
  post:
    operationId: userDelete
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
/project/{projectId}/logout:
  post:
    operationId: userLogout
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
/project/{projectId}/sso:
  post:
    operationId: userSsoCreateOrLogin
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: token
        in: query
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
/project/{projectId}/user:
  post:
    operationId: userCreate
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: create
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserCreate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
/project/{projectId}/user/{userId}:
  get:
    operationId: userGet
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/User'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  patch:
    operationId: userUpdate
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: update
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserUpdate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserMeWithBalance'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  delete:
    operationId: userDelete
    tags: [User]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/admin/user:
  get:
    operationId: userSearchAdmin
    tags: [UserAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: cursor
        in: query
        schema:
          $ref: 'api-client.yaml#/components/schemas/Cursor'
      - name: search
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserSearchAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: UserSearchResponse
              type: object
              properties:
                cursor:
                  $ref: 'api-client.yaml#/components/schemas/Cursor'
                results:
                  type: array
                  items:
                    $ref: 'api-user.yaml#/components/schemas/UserAdmin'
              required:
                - results
  post:
    operationId: userCreateAdmin
    tags: [UserAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: create
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserCreateAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserAdmin'
  delete:
    operationId: userDeleteBulkAdmin
    tags: [UserAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserSearchAdmin'
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/admin/user/{userId}:
  get:
    operationId: userGetAdmin
    tags: [UserAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserAdmin'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  patch:
    operationId: userUpdateAdmin
    tags: [UserAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: update
        in: query
        required: true
        schema:
          $ref: 'api-user.yaml#/components/schemas/UserUpdate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-user.yaml#/components/schemas/UserAdmin'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  delete:
    operationId: userDeleteAdmin
    tags: [UserAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
