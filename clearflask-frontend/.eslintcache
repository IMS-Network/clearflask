[{"/Users/matus/dev/clearflask/clearflask-frontend/src/index.tsx":"1","/Users/matus/dev/clearflask/clearflask-frontend/src/mocker.ts":"2","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/detectEnv.ts":"3","/Users/matus/dev/clearflask/clearflask-frontend/src/Main.tsx":"4","/Users/matus/dev/clearflask/clearflask-frontend/src/api/dataMock.ts":"5","/Users/matus/dev/clearflask/clearflask-frontend/src/api/serverMock.ts":"6","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/configTemplater.ts":"7","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/configEditor.ts":"8","/Users/matus/dev/clearflask/clearflask-frontend/src/api/serverAdmin.ts":"9","/Users/matus/dev/clearflask/clearflask-frontend/src/common/loadingScreen.ts":"10","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/vhUtil.ts":"11","/Users/matus/dev/clearflask/clearflask-frontend/src/common/windowIso.tsx":"12","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/ScrollAnchor.tsx":"13","/Users/matus/dev/clearflask/clearflask-frontend/src/common/EmojiPicker.tsx":"14","/Users/matus/dev/clearflask/clearflask-frontend/src/common/RichEditor.tsx":"15","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/MuiSnackbarProvider.tsx":"16","/Users/matus/dev/clearflask/clearflask-frontend/src/app/App.tsx":"17","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/Loading.tsx":"18","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/ServerErrorNotifier.tsx":"19","/Users/matus/dev/clearflask/clearflask-frontend/src/app/PostStatus.tsx":"20","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/CaptchaChallenger.tsx":"21","/Users/matus/dev/clearflask/clearflask-frontend/src/site/InvoicePage.tsx":"22","/Users/matus/dev/clearflask/clearflask-frontend/src/site/HotjarWrapperMain.tsx":"23","/Users/matus/dev/clearflask/clearflask-frontend/src/site/IntercomWrapperMain.tsx":"24","/Users/matus/dev/clearflask/clearflask-frontend/src/site/Dashboard.tsx":"25","/Users/matus/dev/clearflask/clearflask-frontend/src/app/AppThemeProvider.tsx":"26","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/EnvironmentNotifier.tsx":"27","/Users/matus/dev/clearflask/clearflask-frontend/src/site/Site.tsx":"28","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/arrayUtil.ts":"29","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/slugger.ts":"30","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/auth.ts":"31","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/richEditorUtil.ts":"32","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/uuid.ts":"33","/Users/matus/dev/clearflask/clearflask-frontend/src/api/server.ts":"34","/Users/matus/dev/clearflask/clearflask-frontend/src/common/notification/webNotification.ts":"35","/Users/matus/dev/clearflask/clearflask-frontend/src/common/quill-format-block.ts":"36","/Users/matus/dev/clearflask/clearflask-frontend/src/common/quill-format-link.ts":"37","/Users/matus/dev/clearflask/clearflask-frontend/src/common/ClosablePopper.tsx":"38","/Users/matus/dev/clearflask/clearflask-frontend/src/common/RichViewer.tsx":"39","/Users/matus/dev/clearflask/clearflask-frontend/src/site/DemoApp.tsx":"40","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Promised.tsx":"41","/Users/matus/dev/clearflask/clearflask-frontend/src/site/TrialSignupPage.tsx":"42","/Users/matus/dev/clearflask/clearflask-frontend/src/site/PricingPage.tsx":"43","/Users/matus/dev/clearflask/clearflask-frontend/src/site/ContactPage.tsx":"44","/Users/matus/dev/clearflask/clearflask-frontend/src/site/LegalPage.tsx":"45","/Users/matus/dev/clearflask/clearflask-frontend/src/app/SsoSuccessDemoPage.tsx":"46","/Users/matus/dev/clearflask/clearflask-frontend/src/site/LandingPage.tsx":"47","/Users/matus/dev/clearflask/clearflask-frontend/src/site/SigninPage.tsx":"48","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/titleUtil.tsx":"49","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/routerUtil.tsx":"50","/Users/matus/dev/clearflask/clearflask-frontend/src/app/ErrorPage.tsx":"51","/Users/matus/dev/clearflask/clearflask-frontend/src/common/MuiAnimatedSwitch.tsx":"52","/Users/matus/dev/clearflask/clearflask-frontend/src/common/DropdownButton.tsx":"53","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/WelcomePage.tsx":"54","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/UsersPage.tsx":"55","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/UserSelection.tsx":"56","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/debounce.ts":"57","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/SettingsPage.tsx":"58","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/DashboardHome.tsx":"59","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CreatedPage.tsx":"60","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CommentsPage.tsx":"61","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CreatePage.tsx":"62","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/BillingPage.tsx":"63","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/MediaQuery.tsx":"64","/Users/matus/dev/clearflask/clearflask-frontend/src/common/UserDisplayMe.tsx":"65","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Layout.tsx":"66","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Page.tsx":"67","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/ProjectSettings.tsx":"68","/Users/matus/dev/clearflask/clearflask-frontend/src/common/ContentScroll.tsx":"69","/Users/matus/dev/clearflask/clearflask-frontend/src/app/ErrorMsg.tsx":"70","/Users/matus/dev/clearflask/clearflask-frontend/src/site/PricingSlider.tsx":"71","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/MarkdownElement.tsx":"72","/Users/matus/dev/clearflask/clearflask-frontend/src/common/SubmitButton.tsx":"73","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Message.tsx":"74","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/injects/WorkflowPreview.tsx":"75","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/RoadmapControls.tsx":"76","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/HorizontalPanels.tsx":"77","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/TemplateDemo.tsx":"78","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/Hero.tsx":"79","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/PrioritizationControlsVoting.tsx":"80","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/PrioritizationControlsExpressions.tsx":"81","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/PrioritizationControlsCredits.tsx":"82","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/Demo.tsx":"83","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/Block.tsx":"84","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/BlockContent.tsx":"85","/Users/matus/dev/clearflask/clearflask-frontend/src/app/PostStatusIframe.tsx":"86","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/UserExplorer.tsx":"87","/Users/matus/dev/clearflask/clearflask-frontend/src/common/UpdatableField.tsx":"88","/Users/matus/dev/clearflask/clearflask-frontend/src/common/UserDisplay.tsx":"89","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CategoryStats.tsx":"90","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/Loader.tsx":"91","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/DividerCorner.tsx":"92","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/OnboardingDemo.tsx":"93","/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/BillingChangePlanDialog.tsx":"94","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PanelSearch.tsx":"95","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PanelPost.tsx":"96","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/SelectionPicker.tsx":"97","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/Panel.tsx":"98","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CommentList.tsx":"99","/Users/matus/dev/clearflask/clearflask-frontend/src/site/PricingPlan.tsx":"100","/Users/matus/dev/clearflask/clearflask-frontend/src/common/StripeCreditCard.tsx":"101","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/csvUtil.ts":"102","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Property.tsx":"103","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CategorySelect.tsx":"104","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/UpgradeWrapper.tsx":"105","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/PresetWidget.tsx":"106","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/textToHash.js":"107","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/prism.js":"108","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/historyUtil.ts":"109","/Users/matus/dev/clearflask/clearflask-frontend/src/common/notification/mobileNotification.ts":"110","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/animateUtil.ts":"111","/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/TemplateDemoControls.tsx":"112","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Scale.tsx":"113","/Users/matus/dev/clearflask/clearflask-frontend/src/common/FakeBrowser.tsx":"114","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/CreditView.tsx":"115","/Users/matus/dev/clearflask/clearflask-frontend/src/common/ModStar.tsx":"116","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/Post.tsx":"117","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/DividerVertical.tsx":"118","/Users/matus/dev/clearflask/clearflask-frontend/src/common/AcceptTerms.tsx":"119","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/LoadMoreButton.tsx":"120","/Users/matus/dev/clearflask/clearflask-frontend/src/common/HelpPopper.tsx":"121","/Users/matus/dev/clearflask/clearflask-frontend/src/common/CreditCard.tsx":"122","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Overlay.tsx":"123","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/TableProp.tsx":"124","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/pageVisibility.ts":"125","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/refUtil.ts":"126","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/Delimited.tsx":"127","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/VotingControl.tsx":"128","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PostEdit.tsx":"129","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/LogIn.tsx":"130","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/FundingControl.tsx":"131","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/FundingBar.tsx":"132","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Truncate.tsx":"133","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CommentReply.tsx":"134","/Users/matus/dev/clearflask/clearflask-frontend/src/common/ModAction.tsx":"135","/Users/matus/dev/clearflask/clearflask-frontend/src/common/InViewObserver.tsx":"136","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/mathutil.ts":"137","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/TagSelect.tsx":"138","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/DigitsInput.tsx":"139","/Users/matus/dev/clearflask/clearflask-frontend/src/common/Hr.tsx":"140","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/CreditFractionView.tsx":"141","/Users/matus/dev/clearflask/clearflask-frontend/src/common/GradientFade.tsx":"142","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/StatusSelect.tsx":"143","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/Comment.tsx":"144","/Users/matus/dev/clearflask/clearflask-frontend/src/common/DeviceContainer.tsx":"145","/Users/matus/dev/clearflask/clearflask-frontend/src/common/DemoPushPermissionDialog.tsx":"146","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/ExplorerTemplate.tsx":"147","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/imageUtil.ts":"148","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/injects/CreditPreview.tsx":"149","/Users/matus/dev/clearflask/clearflask-frontend/src/app/LoadingPage.tsx":"150","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/IdeaExplorer.tsx":"151","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/emailDisposableList.ts":"152","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CommentEdit.tsx":"153","/Users/matus/dev/clearflask/clearflask-frontend/src/common/DropdownTab.tsx":"154","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Menu.tsx":"155","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Crumbs.tsx":"156","/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/ConfigView.tsx":"157","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/SubscriptionStatusNotifier.tsx":"158","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/UserPage.tsx":"159","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PostPage.tsx":"160","/Users/matus/dev/clearflask/clearflask-frontend/src/site/IntercomWrapper.tsx":"161","/Users/matus/dev/clearflask/clearflask-frontend/src/site/HotjarWrapper.tsx":"162","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/PushNotificationListener.tsx":"163","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/PrivateProjectLogin.tsx":"164","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/AnimatedRoutes.tsx":"165","/Users/matus/dev/clearflask/clearflask-frontend/src/app/Header.tsx":"166","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/CustomerExternalTrackers.tsx":"167","/Users/matus/dev/clearflask/clearflask-frontend/src/app/SsoSuccessPage.tsx":"168","/Users/matus/dev/clearflask/clearflask-frontend/src/app/CustomPage.tsx":"169","/Users/matus/dev/clearflask/clearflask-frontend/src/app/BasePage.tsx":"170","/Users/matus/dev/clearflask/clearflask-frontend/src/app/BankPage.tsx":"171","/Users/matus/dev/clearflask/clearflask-frontend/src/site/IntercomWrapperCustomer.tsx":"172","/Users/matus/dev/clearflask/clearflask-frontend/src/app/AccountPage.tsx":"173","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/intercomUtil.js":"174","/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/stringUtil.ts":"175","/Users/matus/dev/clearflask/clearflask-frontend/src/common/UserContributions.tsx":"176","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/UserEdit.tsx":"177","/Users/matus/dev/clearflask/clearflask-frontend/src/app/NotificationBadge.tsx":"178","/Users/matus/dev/clearflask/clearflask-frontend/src/app/NotificationPopup.tsx":"179","/Users/matus/dev/clearflask/clearflask-frontend/src/site/HotjarWrapperCustomer.tsx":"180","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/TemplateLiquid.tsx":"181","/Users/matus/dev/clearflask/clearflask-frontend/src/app/Footer.tsx":"182","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/TransactionList.tsx":"183","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PanelComment.tsx":"184","/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/NotificationList.tsx":"185","/Users/matus/dev/clearflask/clearflask-frontend/src/app/PoweredBy.tsx":"186"},{"size":597,"mtime":1612075542684,"results":"187","hashOfConfig":"188"},{"size":1640,"mtime":1611995914567,"results":"189","hashOfConfig":"188"},{"size":1198,"mtime":1611995914563,"results":"190","hashOfConfig":"188"},{"size":7554,"mtime":1612075542483,"results":"191","hashOfConfig":"188"},{"size":33230,"mtime":1607441535255,"results":"192","hashOfConfig":"188"},{"size":57214,"mtime":1612074345082,"results":"193","hashOfConfig":"188"},{"size":45548,"mtime":1606921250459,"results":"194","hashOfConfig":"188"},{"size":74286,"mtime":1609397276579,"results":"195","hashOfConfig":"188"},{"size":13527,"mtime":1611995914543,"results":"196","hashOfConfig":"188"},{"size":380,"mtime":1611998094147,"results":"197","hashOfConfig":"188"},{"size":432,"mtime":1611573069730,"results":"198","hashOfConfig":"188"},{"size":809,"mtime":1611995914565,"results":"199","hashOfConfig":"188"},{"size":2597,"mtime":1612074344996,"results":"200","hashOfConfig":"188"},{"size":2002,"mtime":1603198994705,"results":"201","hashOfConfig":"188"},{"size":23855,"mtime":1609985084528,"results":"202","hashOfConfig":"188"},{"size":1132,"mtime":1601341258552,"results":"203","hashOfConfig":"188"},{"size":11137,"mtime":1611995914544,"results":"204","hashOfConfig":"188"},{"size":531,"mtime":1589429318092,"results":"205","hashOfConfig":"188"},{"size":1076,"mtime":1607706450200,"results":"206","hashOfConfig":"188"},{"size":5495,"mtime":1612075542724,"results":"207","hashOfConfig":"188"},{"size":2466,"mtime":1607706450217,"results":"208","hashOfConfig":"188"},{"size":1133,"mtime":1608219756634,"results":"209","hashOfConfig":"188"},{"size":254,"mtime":1607330289126,"results":"210","hashOfConfig":"188"},{"size":1239,"mtime":1607484720110,"results":"211","hashOfConfig":"188"},{"size":30549,"mtime":1611995914568,"results":"212","hashOfConfig":"188"},{"size":5126,"mtime":1611997931836,"results":"213","hashOfConfig":"188"},{"size":533,"mtime":1607706450126,"results":"214","hashOfConfig":"188"},{"size":12955,"mtime":1612075542516,"results":"215","hashOfConfig":"188"},{"size":140,"mtime":1583580345077,"results":"216","hashOfConfig":"188"},{"size":139,"mtime":1583513788696,"results":"217","hashOfConfig":"188"},{"size":343,"mtime":1583513788879,"results":"218","hashOfConfig":"188"},{"size":75,"mtime":1606582448939,"results":"219","hashOfConfig":"188"},{"size":343,"mtime":1611999885854,"results":"220","hashOfConfig":"188"},{"size":54150,"mtime":1611995914543,"results":"221","hashOfConfig":"188"},{"size":5604,"mtime":1611995914561,"results":"222","hashOfConfig":"188"},{"size":216,"mtime":1606502906705,"results":"223","hashOfConfig":"188"},{"size":1405,"mtime":1606502906706,"results":"224","hashOfConfig":"188"},{"size":6380,"mtime":1611573069729,"results":"225","hashOfConfig":"188"},{"size":10983,"mtime":1606806921537,"results":"226","hashOfConfig":"188"},{"size":3462,"mtime":1612074344987,"results":"227","hashOfConfig":"188"},{"size":1254,"mtime":1611998741220,"results":"228","hashOfConfig":"188"},{"size":8386,"mtime":1612075542503,"results":"229","hashOfConfig":"188"},{"size":10244,"mtime":1607706451350,"results":"230","hashOfConfig":"188"},{"size":15821,"mtime":1612075542605,"results":"231","hashOfConfig":"188"},{"size":1525,"mtime":1612074459290,"results":"232","hashOfConfig":"188"},{"size":999,"mtime":1611995914546,"results":"233","hashOfConfig":"188"},{"size":31906,"mtime":1612075542684,"results":"234","hashOfConfig":"188"},{"size":5420,"mtime":1611995914569,"results":"235","hashOfConfig":"188"},{"size":1061,"mtime":1611997743412,"results":"236","hashOfConfig":"188"},{"size":380,"mtime":1611573069730,"results":"237","hashOfConfig":"188"},{"size":812,"mtime":1607706450951,"results":"238","hashOfConfig":"188"},{"size":1775,"mtime":1588996482244,"results":"239","hashOfConfig":"188"},{"size":1617,"mtime":1611573069729,"results":"240","hashOfConfig":"188"},{"size":2297,"mtime":1603476616258,"results":"241","hashOfConfig":"188"},{"size":814,"mtime":1607275486768,"results":"242","hashOfConfig":"188"},{"size":6415,"mtime":1610866677492,"results":"243","hashOfConfig":"188"},{"size":770,"mtime":1605771196328,"results":"244","hashOfConfig":"188"},{"size":7216,"mtime":1611573069738,"results":"245","hashOfConfig":"188"},{"size":8483,"mtime":1607706451190,"results":"246","hashOfConfig":"188"},{"size":10739,"mtime":1612075542623,"results":"247","hashOfConfig":"188"},{"size":6701,"mtime":1607706451258,"results":"248","hashOfConfig":"188"},{"size":22486,"mtime":1607159054136,"results":"249","hashOfConfig":"188"},{"size":39233,"mtime":1611995914571,"results":"250","hashOfConfig":"188"},{"size":841,"mtime":1605409648539,"results":"251","hashOfConfig":"188"},{"size":1178,"mtime":1602994872836,"results":"252","hashOfConfig":"188"},{"size":9464,"mtime":1604801169847,"results":"253","hashOfConfig":"188"},{"size":3194,"mtime":1612075542532,"results":"254","hashOfConfig":"188"},{"size":19907,"mtime":1610866677486,"results":"255","hashOfConfig":"188"},{"size":2738,"mtime":1612072994154,"results":"256","hashOfConfig":"188"},{"size":764,"mtime":1607706450881,"results":"257","hashOfConfig":"188"},{"size":6939,"mtime":1606730638953,"results":"258","hashOfConfig":"188"},{"size":7652,"mtime":1612074903842,"results":"259","hashOfConfig":"188"},{"size":1930,"mtime":1605369671654,"results":"260","hashOfConfig":"188"},{"size":986,"mtime":1605712403914,"results":"261","hashOfConfig":"188"},{"size":5461,"mtime":1607706451398,"results":"262","hashOfConfig":"188"},{"size":1834,"mtime":1605375091651,"results":"263","hashOfConfig":"188"},{"size":2848,"mtime":1611995914578,"results":"264","hashOfConfig":"188"},{"size":847,"mtime":1606877346100,"results":"265","hashOfConfig":"188"},{"size":3383,"mtime":1611573069739,"results":"266","hashOfConfig":"188"},{"size":1410,"mtime":1601552748221,"results":"267","hashOfConfig":"188"},{"size":2222,"mtime":1584754979881,"results":"268","hashOfConfig":"188"},{"size":1994,"mtime":1592599421515,"results":"269","hashOfConfig":"188"},{"size":4702,"mtime":1607706451239,"results":"270","hashOfConfig":"188"},{"size":5869,"mtime":1611995914577,"results":"271","hashOfConfig":"188"},{"size":3586,"mtime":1611573069739,"results":"272","hashOfConfig":"188"},{"size":1520,"mtime":1611998897108,"results":"273","hashOfConfig":"188"},{"size":16757,"mtime":1607706451167,"results":"274","hashOfConfig":"188"},{"size":3257,"mtime":1607397499672,"results":"275","hashOfConfig":"188"},{"size":2662,"mtime":1605411784974,"results":"276","hashOfConfig":"188"},{"size":6412,"mtime":1607706451207,"results":"277","hashOfConfig":"188"},{"size":1221,"mtime":1607706450803,"results":"278","hashOfConfig":"188"},{"size":4824,"mtime":1605859261165,"results":"279","hashOfConfig":"188"},{"size":5019,"mtime":1607706450087,"results":"280","hashOfConfig":"188"},{"size":3795,"mtime":1607706451319,"results":"281","hashOfConfig":"188"},{"size":13368,"mtime":1607706450377,"results":"282","hashOfConfig":"188"},{"size":6925,"mtime":1607706450442,"results":"283","hashOfConfig":"188"},{"size":16663,"mtime":1607270573485,"results":"284","hashOfConfig":"188"},{"size":1910,"mtime":1607706450803,"results":"285","hashOfConfig":"188"},{"size":6294,"mtime":1607706450684,"results":"286","hashOfConfig":"188"},{"size":8919,"mtime":1606812458601,"results":"287","hashOfConfig":"188"},{"size":1998,"mtime":1596423684923,"results":"288","hashOfConfig":"188"},{"size":4060,"mtime":1610866677487,"results":"289","hashOfConfig":"188"},{"size":21345,"mtime":1612075542588,"results":"290","hashOfConfig":"188"},{"size":2650,"mtime":1610866677484,"results":"291","hashOfConfig":"188"},{"size":3748,"mtime":1608723258208,"results":"292","hashOfConfig":"188"},{"size":4869,"mtime":1608692406694,"results":"293","hashOfConfig":"188"},{"size":908,"mtime":1583511163869,"results":"294","hashOfConfig":"188"},{"size":1378,"mtime":1583150638187,"results":"295","hashOfConfig":"188"},{"size":229,"mtime":1588407787329,"results":"296","hashOfConfig":"188"},{"size":2251,"mtime":1583516578420,"results":"297","hashOfConfig":"188"},{"size":1201,"mtime":1612074339774,"results":"298","hashOfConfig":"188"},{"size":2955,"mtime":1606920940640,"results":"299","hashOfConfig":"188"},{"size":1800,"mtime":1589010735875,"results":"300","hashOfConfig":"188"},{"size":1767,"mtime":1597839543306,"results":"301","hashOfConfig":"188"},{"size":2698,"mtime":1604417763528,"results":"302","hashOfConfig":"188"},{"size":1153,"mtime":1605772266114,"results":"303","hashOfConfig":"188"},{"size":44781,"mtime":1612075542825,"results":"304","hashOfConfig":"188"},{"size":897,"mtime":1605256307235,"results":"305","hashOfConfig":"188"},{"size":1652,"mtime":1607706451285,"results":"306","hashOfConfig":"188"},{"size":707,"mtime":1584190081752,"results":"307","hashOfConfig":"188"},{"size":2144,"mtime":1598147022677,"results":"308","hashOfConfig":"188"},{"size":3053,"mtime":1598147022453,"results":"309","hashOfConfig":"188"},{"size":1687,"mtime":1583513778365,"results":"310","hashOfConfig":"188"},{"size":9653,"mtime":1608207930909,"results":"311","hashOfConfig":"188"},{"size":646,"mtime":1611998607166,"results":"312","hashOfConfig":"188"},{"size":195,"mtime":1589099155303,"results":"313","hashOfConfig":"188"},{"size":1242,"mtime":1598147022746,"results":"314","hashOfConfig":"188"},{"size":3062,"mtime":1607706450777,"results":"315","hashOfConfig":"188"},{"size":13282,"mtime":1612075542757,"results":"316","hashOfConfig":"188"},{"size":35592,"mtime":1611998054685,"results":"317","hashOfConfig":"188"},{"size":16816,"mtime":1607706450900,"results":"318","hashOfConfig":"188"},{"size":4697,"mtime":1607706450916,"results":"319","hashOfConfig":"188"},{"size":1342,"mtime":1592656130532,"results":"320","hashOfConfig":"188"},{"size":3364,"mtime":1612075542740,"results":"321","hashOfConfig":"188"},{"size":425,"mtime":1605772313722,"results":"322","hashOfConfig":"188"},{"size":854,"mtime":1589216961101,"results":"323","hashOfConfig":"188"},{"size":163,"mtime":1583513788122,"results":"324","hashOfConfig":"188"},{"size":4554,"mtime":1607706450550,"results":"325","hashOfConfig":"188"},{"size":3223,"mtime":1597149166352,"results":"326","hashOfConfig":"188"},{"size":2800,"mtime":1606802960665,"results":"327","hashOfConfig":"188"},{"size":2425,"mtime":1584754163178,"results":"328","hashOfConfig":"188"},{"size":1264,"mtime":1609599910876,"results":"329","hashOfConfig":"188"},{"size":2793,"mtime":1608217110481,"results":"330","hashOfConfig":"188"},{"size":11071,"mtime":1611995914548,"results":"331","hashOfConfig":"188"},{"size":3921,"mtime":1588902449598,"results":"332","hashOfConfig":"188"},{"size":7281,"mtime":1611998776097,"results":"333","hashOfConfig":"188"},{"size":5844,"mtime":1607651763513,"results":"334","hashOfConfig":"188"},{"size":125,"mtime":1602595070984,"results":"335","hashOfConfig":"188"},{"size":3280,"mtime":1607706451359,"results":"336","hashOfConfig":"188"},{"size":440,"mtime":1607706520105,"results":"337","hashOfConfig":"188"},{"size":23033,"mtime":1612075542475,"results":"338","hashOfConfig":"188"},{"size":64404,"mtime":1587787505229,"results":"339","hashOfConfig":"188"},{"size":6020,"mtime":1612075542767,"results":"340","hashOfConfig":"188"},{"size":4126,"mtime":1612072952845,"results":"341","hashOfConfig":"188"},{"size":8505,"mtime":1603467504048,"results":"342","hashOfConfig":"188"},{"size":2366,"mtime":1596890412722,"results":"343","hashOfConfig":"188"},{"size":767,"mtime":1583513797447,"results":"344","hashOfConfig":"188"},{"size":1435,"mtime":1607706424235,"results":"345","hashOfConfig":"188"},{"size":5407,"mtime":1608213297377,"results":"346","hashOfConfig":"188"},{"size":4146,"mtime":1608212982999,"results":"347","hashOfConfig":"188"},{"size":1728,"mtime":1607453071600,"results":"348","hashOfConfig":"188"},{"size":541,"mtime":1607330289165,"results":"349","hashOfConfig":"188"},{"size":1164,"mtime":1607706450200,"results":"350","hashOfConfig":"188"},{"size":1619,"mtime":1607706450200,"results":"351","hashOfConfig":"188"},{"size":1066,"mtime":1607706450217,"results":"352","hashOfConfig":"188"},{"size":11819,"mtime":1612072066066,"results":"353","hashOfConfig":"188"},{"size":2145,"mtime":1611995914555,"results":"354","hashOfConfig":"188"},{"size":1176,"mtime":1611995914548,"results":"355","hashOfConfig":"188"},{"size":8012,"mtime":1611995914544,"results":"356","hashOfConfig":"188"},{"size":2292,"mtime":1608221218243,"results":"357","hashOfConfig":"188"},{"size":2714,"mtime":1608213071820,"results":"358","hashOfConfig":"188"},{"size":1064,"mtime":1607453093432,"results":"359","hashOfConfig":"188"},{"size":20150,"mtime":1609593137335,"results":"360","hashOfConfig":"188"},{"size":1530,"mtime":1611998529139,"results":"361","hashOfConfig":"188"},{"size":218,"mtime":1592314271054,"results":"362","hashOfConfig":"188"},{"size":2180,"mtime":1607706450087,"results":"363","hashOfConfig":"188"},{"size":15040,"mtime":1609593317509,"results":"364","hashOfConfig":"188"},{"size":1612,"mtime":1607706450318,"results":"365","hashOfConfig":"188"},{"size":1105,"mtime":1607706450271,"results":"366","hashOfConfig":"188"},{"size":613,"mtime":1607330297563,"results":"367","hashOfConfig":"188"},{"size":1508,"mtime":1607706525213,"results":"368","hashOfConfig":"188"},{"size":1954,"mtime":1608303051771,"results":"369","hashOfConfig":"188"},{"size":6146,"mtime":1607706450866,"results":"370","hashOfConfig":"188"},{"size":4611,"mtime":1607706450145,"results":"371","hashOfConfig":"188"},{"size":4877,"mtime":1608207930904,"results":"372","hashOfConfig":"188"},{"size":890,"mtime":1598189701427,"results":"373","hashOfConfig":"188"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},"vmsewf",{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"376"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"376"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"376"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"376"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"376"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"594"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"594"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"594"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"376"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"753"},"/Users/matus/dev/clearflask/clearflask-frontend/src/index.tsx",[],["754","755"],"/Users/matus/dev/clearflask/clearflask-frontend/src/mocker.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/detectEnv.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/Main.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/api/dataMock.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/api/serverMock.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/configTemplater.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/configEditor.ts",["756","757"],"import * as Admin from '../../api/admin';\nimport Schema from '../../api/schema/schema.json';\nimport stringToSlug from '../util/slugger';\nimport randomUuid from '../util/uuid';\n\n/**\n * OpenApi vendor properties.\n */\n\nexport enum OpenApiTags {\n  /**\n   * Single page\n   * Must either be root, or parent must be another Page or PageGroup.\n   */\n  Page = 'x-clearflask-page',\n  /**\n   * Dynamic group of pages\n   * Must either be root, or parent must be another Page or PageGroup.\n   */\n  PageGroup = 'x-clearflask-page-group',\n  /** Property */\n  Prop = 'x-clearflask-prop',\n  /**\n   * Property Link\n   * Links value of a string to an id of another array item.\n   * Can be on a string property or array of string property.\n   */\n  PropLink = 'x-clearflask-prop-link',\n  /** Hide */\n  Hide = 'x-clearflask-hide',\n  /**\n   * Adds an additional property located somewhere else into this object/page\n   * as if it was part of it in the first place. Useful When you want to\n   * inject a property deeply nested in an object. If the property doesn't\n   * exist, it's silently ignored.\n   */\n  AdditionalProps = 'x-clearflask-additional-props',\n}\nexport interface xCfPage {\n  name?: string;\n  nameFromProp?: string;\n  colorFromProp?: string;\n  order?: number;\n  description?: string;\n  defaultValue?: true | undefined;\n}\nexport interface xCfPageGroup {\n  name?: string;\n  order?: number;\n  description?: string;\n  defaultValue?: true | undefined;\n  /** Properties to show on main PageGroup page inside table */\n  tablePropertyNames: string[];\n  /** Prevent re-ordering of items by user. */\n  disableReordering?: boolean;\n}\nexport interface xCfProp {\n  name?: string;\n  order?: number;\n  description?: string;\n  placeholder?: string | number;\n  /**\n   * Default value to set on new properties.\n   */\n  defaultValue?: any;\n  subType?: PropSubType;\n  /** EnumProperty only */\n  enumNames?: string[];\n  /**\n   * Will autocomplete slug properties with current value.\n   * Example: if you set this property to 'Feature Requests',\n   * the supplied path will become something like 'feature-requests'.\n   * If skipFirst is set, if the path value of this is 0, then auto complete\n   * will be disabled. Useful for Page slug should be empty for home page.\n   */\n  slugAutoComplete?: {\n    path: Path;\n    skipFirst?: number;\n  };\n  /** BooleanProperty only.\n   * Treat false value as undefined.\n   * Useful if you only need two states but don't want to waste space\n   * in config with a false value.\n   */\n  falseAsUndefined?: boolean;\n  /** Applicable to arrays only. Prevent re-ordering of items by user. */\n  disableReordering?: boolean;\n  trueLabel?: string;\n  falseLabel?: string;\n}\nexport enum PropSubType {\n  /**\n   * A string property hidden from user and auto filled with unique value.\n   * Used inside an array of objects with a property link.\n   */\n  Id = 'id',\n  Color = 'color',\n  Emoji = 'emoji',\n  KeyGen = 'keygen',\n  Multiline = 'multiline',\n  Rich = 'rich',\n}\nexport interface xCfPropLink {\n  /** Path to array */\n  linkPath: string[];\n  /** If set, links to this prop name. Otherwise links to the array index */\n  idPropName: string;\n  /** If set, displays the prop value as the name */\n  displayPropName: string;\n  /** If set, use this color from the prop value */\n  colorPropName?: string;\n  /** If set, cannot create a new item in place, also implicitly assumed if filter is used below */\n  disallowCreate?: boolean;\n  /** If set, the special variable <$> will be replaced with a filter\n   * In more detail: a special variable <$> will check the path given by the property,\n   * retrieve the value of that property (string or string array), and iterate all\n   * paths replacing the variable <$> with the values.\n   * Example: A filter for statuses needs to only display the statuses for categories that\n   * have been filtered.\n   */\n  filterPath?: string[];\n  /** Part of filterPath, shows which property should be considered as id */\n  filterIdPropName?: string;\n  /** Used with filterPath: if the destination property has no values, use all values */\n  filterShowAllIfNone?: boolean;\n}\nexport interface xCfAdditionalProps {\n  /** Path to the property */\n  props: Array<{\n    propPath: string[];\n    /**\n     * If set, the special variable <&> will be replaced with value of this id prop\n     * path and auto-created.\n     * In more detail: This is useful when you are under an array path and don't want\n     * to have all the items in the array point to the exact same additional prop.\n     */\n    dynamicIdPropName?: string;\n  }>;\n}\n\n/**\n * Settings objects\n */\n\nexport type Unsubscribe = () => void;\nexport interface Setting<T extends PageType | PageGroupType | PropertyType, R> {\n  /** Unique object key; used in React to determine whether prop changed */\n  key: string;\n  type: T;\n  path: Path;\n  pathStr: string;\n  required: boolean;\n  value?: R | undefined;\n  set(val: R | undefined): void;\n  setDefault(): void;\n  errorMsg?: string;\n  /** Validates value and sets the errorMsg accordingly */\n  validateValue(val: R | undefined);\n  /** Subscribe to updates on this path only */\n  subscribe(callback: () => void): Unsubscribe;\n}\n\nexport type PageType = 'page';\nexport const PageType: PageType = 'page';\nexport interface Page extends Setting<PageType, true | undefined>, xCfPage {\n  name: string;\n  /** Name potentially derived from a property */\n  getDynamicName: () => string;\n  getColor: () => string | undefined;\n  depth: ResolveDepth;\n  getChildren(): PageChildren;\n  setRaw(val: object | undefined): void;\n  cachedChildren?: PageChildren; // Internal use only\n}\nexport interface PageChildren {\n  all: (Page | PageGroup | Property)[]\n  pages: Page[];\n  groups: PageGroup[];\n  props: Property[];\n}\n\nexport type PageGroupType = 'pagegroup';\nexport const PageGroupType: PageGroupType = 'pagegroup';\nexport interface PageGroup extends Setting<PageGroupType, true | undefined>, xCfPageGroup {\n  name: string;\n  depth: ResolveDepth;\n  minItems?: number;\n  maxItems?: number;\n  getChildPages(): Page[];\n  insert(index?: number): Page;\n  duplicate(sourceIndex: number): Page;\n  moveUp(index: number): void;\n  moveDown(index: number): void;\n  delete(index: number): void;\n  setRaw(val: Array<any> | undefined): void;\n  cachedChildPages?: Page[]; // Internal use only\n}\n\ninterface PropertyBase<T extends PageType | PageGroupType | PropertyType, R> extends Setting<T, R>, xCfProp {\n  name: string;\n  hide: boolean;\n}\nexport enum PropertyType {\n  String = 'string',\n  Link = 'link',\n  LinkMulti = 'linkmulti',\n  Number = 'number',\n  Integer = 'integer',\n  Boolean = 'boolean',\n  Enum = 'enum',\n  Array = 'array',\n  Object = 'object',\n  Dict = 'dict',\n}\nexport type Property =\n  StringProperty\n  | LinkProperty\n  | LinkMultiProperty\n  | NumberProperty\n  | IntegerProperty\n  | BooleanProperty\n  | EnumProperty\n  | ArrayProperty\n  | ObjectProperty\n  | DictProperty;\n\nexport interface StringProperty extends PropertyBase<PropertyType.String, string> {\n  minLength?: number;\n  maxLength?: number;\n  validation?: RegExp;\n  format?: StringFormat | string;\n}\n\nexport interface LinkProperty extends PropertyBase<PropertyType.Link, string>, xCfPropLink {\n  allowCreate: boolean;\n  create(name: string): void;\n  getOptions(): LinkPropertyOption[];\n  cachedOptions?: LinkPropertyOption[] // Internal use only\n}\nexport interface LinkPropertyOption {\n  id: string;\n  name: string;\n  color?: string;\n}\n\nexport interface NumberProperty extends PropertyBase<PropertyType.Number, number> {\n  minimum?: number;\n  maximum?: number;\n}\n\nexport interface IntegerProperty extends PropertyBase<PropertyType.Integer, number> {\n  minimum?: number;\n  maximum?: number;\n}\n\nexport interface BooleanProperty extends PropertyBase<PropertyType.Boolean, boolean> {\n  trueLabel?: string;\n  falseLabel?: string;\n}\n\nexport interface EnumProperty extends PropertyBase<PropertyType.Enum, string> {\n  items: EnumItem[];\n}\nexport interface EnumItem {\n  name: string;\n  value: string;\n}\n\n/**\n * Array \n * If isRequired is false, value determines whether the object is undefined\n * or set. If set, default values are set\n * \n * TODO add support for uniqueItems\n */\nexport interface ArrayProperty extends PropertyBase<PropertyType.Array, true> {\n  minItems?: number;\n  maxItems?: number;\n  uniqueItems?: boolean;\n  childType: PropertyType;\n  childEnumItems?: EnumItem[]; // Only set if childType === Enum\n  childProperties?: Property[];\n  insert(index?: number): Property;\n  duplicate(sourceIndex: number): Property;\n  moveUp(index: number): void;\n  moveDown(index: number): void;\n  delete(index: number): void;\n  setRaw(val: Array<any> | undefined): void;\n}\n\nexport interface LinkMultiProperty extends PropertyBase<PropertyType.LinkMulti, Set<string>>, xCfPropLink {\n  minItems?: number;\n  maxItems?: number;\n  allowCreate: boolean;\n  create(name: string): void;\n  insert(linkId: string): void;\n  delete(linkId: string): void;\n  getOptions(): LinkPropertyOption[];\n  cachedOptions?: LinkPropertyOption[] // Internal use only\n}\n\n/**\n * Object has two functionalities:\n * - If isRequired is true, value is always true and this simply functions\n *   as a grouping of other properties.\n * - If isRequired is false, value determines whether the object is undefined\n *   or set. If set, all 'properties' become visible.\n */\nexport interface ObjectProperty extends PropertyBase<PropertyType.Object, true> {\n  childProperties?: Property[];\n  setRaw(val: object | undefined): void;\n}\n\nexport interface DictProperty extends PropertyBase<PropertyType.Dict, true> {\n  childProperties?: { [key: string]: Property };\n  put(key: string): Property;\n  delete(key: string): void;\n  setRaw(val: object | undefined): void;\n}\n\n/**\n * Other\n */\n\nexport enum ResolveDepth {\n  None = 0, // Does not resolve pages nor properties\n  Shallow = 1, // Resolves only one level of pages and properties\n  Deep = 2, // Resolve all immediately\n}\n\nexport enum StringFormat {\n  Date = 'date',\n  DateTime = 'date-time',\n  Time = 'time',\n}\n\n/**\n * Universal path used for both schema and config instance.\n * String parts correspond to object values; numbers correpsond to array indices.\n * \n * Ex: ['tags', 3, 'color']\n */\nexport type Path = (string | number)[];\nexport const parsePath = (pathStr: string | undefined, delimiter: string | RegExp = /[./]/): Path => {\n  if (!pathStr) {\n    return [];\n  }\n  return pathStr\n    .split(delimiter)\n    .map(pStr => {\n      const pNum = +pStr;\n      return isNaN(pNum) ? pStr : pNum;\n    });\n}\nexport const pathEquals = (l: Path, r: Path) => {\n  return l.length === r.length && l.every((val, index) => val === r[index]);\n}\n\nexport interface Editor {\n\n  clone(): Editor;\n  getConfig(): Admin.ConfigAdmin;\n  setConfig(config: Admin.ConfigAdmin);\n  clearConfig();\n  notify();\n\n  get(path: Path, depth?: ResolveDepth): Page | PageGroup | Property;\n  getPage(path: Path, depth?: ResolveDepth): Page;\n  getPageGroup(path: Path, depth?: ResolveDepth): PageGroup;\n  getProperty(path: Path): Property;\n\n  getValue(path: Path): any;\n  getOrDefaultValue(path: Path, defaultValue: any): any;\n  setValue(path: Path, value: any): void;\n\n  /** Subscribe to all updates in config */\n  subscribe(callback: () => void): Unsubscribe;\n}\n\nexport class EditorImpl implements Editor {\n  config: Admin.ConfigAdmin;\n  cache: any = {};\n  globalSubscribers: { [subscriberId: string]: () => void } = {};\n\n  constructor(config?: Admin.ConfigAdmin) {\n    if (config !== undefined) {\n      this.config = config;\n    } else {\n      this.config = {} as Admin.ConfigAdmin;\n      this.getPage([]).setDefault();\n    }\n  }\n\n  clone(): Editor {\n    return new EditorImpl(\n      JSON.parse(\n        JSON.stringify(\n          this.config)));\n  }\n\n  subscribe(callback: () => void): Unsubscribe {\n    const subscriberId = randomUuid();\n    this.globalSubscribers[subscriberId] = callback;\n    return () => delete this.globalSubscribers[subscriberId];\n  }\n\n  _subscribe(callback: () => void, subscribers: { [subscriberId: string]: () => void }): Unsubscribe {\n    const subscriberId = randomUuid();\n    subscribers[subscriberId] = callback;\n    return () => delete subscribers[subscriberId];\n  }\n\n  notify(localSubscribers?: { [subscriberId: string]: () => void }): void {\n    localSubscribers && Object.values(localSubscribers).forEach(notify => notify());\n    Object.values(this.globalSubscribers).forEach(notify => notify());\n  }\n\n  getConfig(): Admin.ConfigAdmin {\n    return this.config;\n  }\n\n  setConfig(config: Admin.ConfigAdmin) {\n    this.config = config;\n    this.cacheInvalidate([]);\n    this.notify();\n  }\n\n  clearConfig(): Admin.ConfigAdmin {\n    this.config = {} as Admin.ConfigAdmin;\n    this.getPage([]).setDefault();\n    this.cacheInvalidate([]);\n    this.notify();\n    return this.config;\n  }\n\n  get(path: Path, depth: ResolveDepth = ResolveDepth.None, subSchema?: any): Page | PageGroup | Property {\n    return this.cacheGet(path, () => this.parse(path, depth, subSchema), depth);\n  }\n\n  getPage(path: Path, depth: ResolveDepth = ResolveDepth.None, isRequired?: boolean, subSchema?: any): Page {\n    var result: Page | PageGroup | Property = this.cacheGet(path, () => this.parsePage(path, depth, isRequired, subSchema), depth);\n    if (result.type !== 'page') {\n      throw Error(`Expecting page type but found ${result.type} on path ${path}`);\n    }\n    return result;\n  }\n\n  getPageGroup(path: Path, depth: ResolveDepth = ResolveDepth.None, isRequired?: boolean, subSchema?: any): PageGroup {\n    var result: Page | PageGroup | Property = this.cacheGet(path, () => this.parsePageGroup(path, depth, isRequired, subSchema), depth);\n    if (result.type !== 'pagegroup') {\n      throw Error(`Expecting page group type but found ${result.type} on path ${path}`);\n    }\n    return result;\n  }\n\n  getProperty<T extends Property>(path: Path, isRequired?: boolean, subSchema?: any): T {\n    var result: Page | PageGroup | Property = this.cacheGet(path, () => this.parseProperty(path, isRequired, subSchema));\n    if (result.type === 'page' || result.type === 'pagegroup') {\n      throw Error(`Expecting property type but found ${result.type} on path ${path}`);\n    }\n    return result as T;\n  }\n\n  cacheGet(path: Path, loader: () => Page | PageGroup | Property, minDepth: ResolveDepth = ResolveDepth.None): Page | PageGroup | Property {\n    var pointer = this.cache;\n    for (let i = 0; i < path.length; i++) {\n      var nextPointer = pointer[path[i]];\n      if (nextPointer === undefined) {\n        nextPointer = {};\n        pointer[path[i]] = nextPointer;\n      }\n      pointer = nextPointer;\n    }\n    var value = pointer._;\n    if (value === undefined || (value['depth'] || 0) < minDepth) {\n      value = loader();\n      pointer._ = value;\n    }\n    return value;\n  }\n\n  cacheInvalidate(path: Path): void {\n    if (path.length === 0) {\n      this.cache = {};\n      return;\n    }\n    var pointer = this.cache;\n    for (let i = 0; i < path.length - 1; i++) {\n      pointer = pointer[path[i]];\n      if (pointer === undefined) {\n        return;\n      }\n    }\n    delete pointer[path[path.length - 1]];\n  }\n\n  cacheInvalidateChildren(path: Path): void {\n    var pointer = this.cache;\n    for (let i = 0; i < path.length - 1; i++) {\n      pointer = pointer[path[i]];\n      if (pointer === undefined) {\n        return;\n      }\n    }\n    const cacheNode = pointer[path[path.length - 1]];\n    if (cacheNode._) {\n      pointer[path[path.length - 1]] = { _: cacheNode._ };\n    } else {\n      delete pointer[path[path.length - 1]];\n    }\n  }\n\n  getOrDefaultValue(path: Path, defaultValue: any, subConfig?: any): any {\n    if (path.length === 0) {\n      if (this.config === undefined) {\n        this.config = defaultValue;\n      }\n      return this.config;\n    } else {\n      const parent = this.getValue(path.slice(0, -1));\n      if (parent[path[path.length - 1]] === undefined) {\n        parent[path[path.length - 1]] = defaultValue;\n      }\n      return parent[path[path.length - 1]];\n    }\n  }\n\n  getValue(path: Path, subConfig?: any): any {\n    return path.reduce(\n      (subConfig, nextKey) => subConfig && subConfig[nextKey],\n      subConfig || this.config);\n  }\n\n  setValue(path: Path, value: any): void {\n    if (path.length === 0) {\n      this.config = value;\n    } else {\n      const parent = this.getValue(path.slice(0, -1));\n      if (value === undefined) {\n        if (typeof path[path.length - 1] === 'number') {\n          parent.splice(path[path.length - 1], 1);\n        } else {\n          delete parent[path[path.length - 1]];\n        }\n      } else {\n        parent[path[path.length - 1]] = value;\n      }\n    }\n  }\n\n  sortPagesProps(l: Page | PageGroup | Property, r: Page | PageGroup | Property): number {\n    // id subtype needs to initialize first in case a subsequent link points to itself\n    return (l['subType'] === 'id' ? -1 : (l.order !== undefined ? l.order : l.name))\n      > (r['subType'] === 'id' ? -1 : (r.order !== undefined ? r.order : r.name))\n      ? 1\n      : -1;\n  }\n\n  getCacheKey(path: Path): string {\n    return path.join(':');\n  }\n\n  getSubSchema(path: Path, schema: any = Schema): any {\n    return this.mergeAllOf(path.reduce(\n      (subSchema, nextKey) => {\n        var nextSchema = this.mergeAllOf(subSchema);\n        if (nextSchema.additionalProperties) {\n          // Since schema is same for all dict types, just return the child schema\n          // No need to use nextKey here.\n          nextSchema = nextSchema.additionalProperties;\n        } else {\n          nextSchema = this.skipPaths(nextSchema, ['properties']);\n          nextSchema = nextSchema[typeof nextKey === 'number' ? 'items' : nextKey];\n        }\n        if (!nextSchema) {\n          throw Error(`Cannot find ${nextKey} in path ${path}`);\n        }\n        return nextSchema;\n      }, schema));\n  }\n\n  mergeAllOf(schema: any): any {\n    return schema['allOf'] !== undefined\n      ? {\n        ...schema['allOf'].reduce((result, next) => Object.assign(result, next), {}),\n        properties: schema['allOf'].reduce((result, next) => Object.assign(result, next['properties']), {}),\n        required: schema['allOf'].reduce((result, next) => result.concat(next['required'] || []), []),\n      }\n      : schema;\n  }\n\n  skipPaths(schema: any, pathsToSkip: string[]): any {\n    pathsToSkip.forEach(pathToSkip => {\n      if (schema[pathToSkip]) {\n        schema = schema[pathToSkip]\n      };\n    });\n    return schema;\n  }\n\n  /**\n   * Expands relative paths to absolute paths using signs: . ..\n   */\n  expandRelativePath(path: Path, currPath: Path): Path {\n    var absPath: Path = path;\n    if (!path || path.length <= 0) {\n      absPath = path;\n    } else if (path[0] === '.') {\n      absPath = [\n        ...(currPath.slice(0, currPath.length - 1)),\n        ...(path.slice(1)),\n      ];\n    } else if (path[0] === '..') {\n      var dirUps = 1;\n      for (var i = 1; i <= path.length; i++) {\n        if (path[i] === '..') dirUps++;\n      }\n      absPath = [\n        ...(currPath.slice(0, currPath.length - 1 - dirUps)),\n        ...(path.slice(dirUps)),\n      ];\n    } else {\n      absPath = path;\n    }\n    return absPath;\n  }\n\n  parse(path: Path, depth: ResolveDepth, isRequired?: boolean, subSchema?: any): Page | PageGroup | Property {\n    var schema;\n    if (isRequired !== undefined && subSchema !== undefined) {\n      schema = subSchema;\n    } else {\n      schema = this.getSubSchema(path);\n      if (path.length === 0) {\n        isRequired = true;\n      } else {\n        const parentSchema = this.getSubSchema(path.slice(0, path.length - 1));\n        const propName = path[path.length - 1];\n        isRequired = !!(parentSchema.required && parentSchema.required.includes(propName));\n      }\n    }\n\n    if (schema[OpenApiTags.Page]) {\n      return this.parsePage(path, depth, isRequired, schema);\n    } else if (schema[OpenApiTags.PageGroup]) {\n      return this.parsePageGroup(path, depth, isRequired, schema);\n    } else {\n      return this.parseProperty(path, isRequired, schema);\n    }\n  }\n\n  getEnumItems(propSchema: any): EnumItem[] {\n    const xProp = propSchema[OpenApiTags.Prop] as xCfProp;\n    if (!propSchema.enum.length || propSchema.enum.length === 0) throw Error(`Expecting enum to contain more than one value`);\n    if (xProp && xProp.enumNames && xProp.enumNames.length !== propSchema.enum.length) throw Error(`Expecting 'enumNames' length to match enum values`);\n    const items: EnumItem[] = new Array(propSchema.enum.length);\n    for (let i = 0; i < propSchema.enum.length; i++) {\n      items[i] = {\n        name: xProp && xProp.enumNames && xProp.enumNames[i] || propSchema.enum[i],\n        value: propSchema.enum[i],\n      };\n    }\n    return items;\n  }\n\n  filterPath(path: Path, filterPath: Path, filterIdPropName: string, currPath: Path, subscribe: (p: PageGroupType | Property) => void, filterShowAllIfNone: boolean = false): Path[] {\n    const variableIndex = path.indexOf('<$>');\n    if (variableIndex === -1) return [path];\n\n    filterPath = this.expandRelativePath(filterPath, currPath);\n    const filterTarget = this.get(filterPath);\n    var filterIds: Set<string> = new Set();\n    if (filterTarget.type === PropertyType.LinkMulti) {\n      subscribe(filterTarget);\n      if (filterTarget.value !== undefined && filterTarget.value.size > 0) {\n        filterIds = new Set([...filterTarget.value]);\n      }\n    } else if (filterTarget.type === PropertyType.Array && filterTarget.childType === PropertyType.String) {\n      subscribe(filterTarget);\n      if (filterTarget.childProperties !== undefined && filterTarget.childProperties?.length > 0) {\n        filterIds = new Set(filterTarget.childProperties\n          .map(childProp => childProp.value as string));\n      }\n    } else if (filterTarget.type === PropertyType.Link || filterTarget.type === PropertyType.String) {\n      if (filterTarget.value !== undefined) {\n        filterIds = new Set([filterTarget.value]);\n      }\n    } else {\n      throw Error(`Filtered path ${path} filter ${filterPath} is pointing to an unsupported variable type ${filterTarget.type} ${filterTarget.type === PropertyType.Array ? filterTarget.childType : ''}`)\n    }\n    if (filterIds.size <= 0 && !filterShowAllIfNone) return [];\n\n    const valuesPath = path.slice(0, variableIndex);\n    const valuesTarget = this.get(valuesPath);\n    var valuesOptions: (Page | Property)[];\n    if (valuesTarget.type === PropertyType.Array) {\n      valuesOptions = valuesTarget.childProperties || [];\n    } else if (valuesTarget.type === PageGroupType) {\n      valuesOptions = valuesTarget.getChildPages() || [];\n    } else {\n      throw Error(`Filtered path ${path} filter ${filterPath} variable destination pointing to non-array non-page-group on path ${valuesPath}`);\n    }\n    if (valuesOptions.length <= 0) return [];\n    return valuesOptions.reduce<number[]>((result, valueOption, index) => {\n      var childProps: Property[];\n      if (valueOption.type === PageType) {\n        childProps = valueOption.getChildren().props;\n      } else if (valueOption.type === PropertyType.Object) {\n        childProps = valueOption.childProperties || [];\n      } else {\n        throw Error(`Filtered path ${path} filter ${filterPath} variable destination pointing to non-array non-page-group on path ${valuesPath}`);\n      }\n      const id = childProps!.find(prop => {\n        const propName = prop.path[prop.path.length - 1];\n        return prop.subType === PropSubType.Id && propName === filterIdPropName\n      })!.value! as string;\n      return ((filterIds.size <= 0 && filterShowAllIfNone)\n        || filterIds.has(id))\n        ? [...result, index]\n        : result;\n    }, [])\n      .map(index => {\n        const newPath = [...path];\n        newPath[variableIndex] = index;\n        return newPath;\n      });\n  }\n\n  getLinkOptions(linkProp: LinkProperty | LinkMultiProperty, localSubscribers: { [subscriberId: string]: () => void }, currPath: Path): LinkPropertyOption[] {\n    if (linkProp.cachedOptions !== undefined) return linkProp.cachedOptions;\n    const targetPath = this.expandRelativePath(linkProp.linkPath, linkProp.path);\n    const targets: (PageGroup | ArrayProperty)[] = [];\n    const addTarget = (target: Page | PageGroup | Property) => {\n      if (target.type !== PropertyType.Array && target.type !== PageGroupType) {\n        throw Error(`Link property ${linkProp.path} pointing to non-array non-page-group on path ${target.path}`);\n      }\n      if (target.type === PropertyType.Array && target.childType !== PropertyType.Object) {\n        throw Error(`Link property ${linkProp.path} pointing to array of non-objects on path ${target.path}`);\n      }\n      targets.push(target);\n    };\n    const unsubscribes: (() => void)[] = [];\n    const subscribe = p => unsubscribes.push(p.subscribe(() => {\n      linkProp.cachedOptions = undefined;\n      linkProp.validateValue(linkProp.value as any)\n      unsubscribes.forEach(u => u());\n      this.notify(localSubscribers);\n    }));\n    if (linkProp.linkPath.includes('<$>')) {\n      if (linkProp.filterPath === undefined || linkProp.filterIdPropName === undefined) {\n        throw Error(`Link on path ${currPath} has a filter variable <$> but is missing filterPath or filterIdPropName property`)\n      }\n      const filteredPaths = this.filterPath(linkProp.linkPath, linkProp.filterPath, linkProp.filterIdPropName, currPath, subscribe, linkProp.filterShowAllIfNone);\n      filteredPaths.forEach(filteredPath => {\n        addTarget(this.get(filteredPath));\n      });\n    } else {\n      addTarget(this.get(targetPath));\n    }\n    targets.forEach(target => subscribe(target));\n    const options: (Page | ObjectProperty)[] = targets.flatMap<Page | ObjectProperty>(target => target.type === PageGroupType\n      ? target.getChildPages()\n      : (target.childProperties as ObjectProperty[]) || []);\n    const linkPropertyOptions = options.map((option: Page | ObjectProperty) => {\n      var id: string | undefined = undefined;\n      var name: string | undefined = undefined;\n      var color: string | undefined = undefined;\n      const props: Property[] = (option.type === PageType\n        ? option.getChildren().props\n        : option.childProperties || []);\n      props.forEach((childProp: Property) => {\n        if (childProp.type !== PropertyType.String) {\n          return;\n        }\n        const childPropName = childProp.path[childProp.path.length - 1];\n        if (childPropName === linkProp.displayPropName) {\n          name = childProp.value;\n          subscribe(childProp);\n        }\n        if (childProp.subType === PropSubType.Id\n          && childPropName === linkProp.idPropName) {\n          id = childProp.value;\n          subscribe(childProp);\n        }\n        if (linkProp.colorPropName !== undefined\n          && childProp.subType === PropSubType.Color\n          && childPropName === linkProp.colorPropName) {\n          color = childProp.value;\n          subscribe(childProp);\n        }\n      });\n      if (id === undefined) {\n        throw Error(`Link property ${linkProp.path} idPropName '${linkProp.idPropName}' points to non-existent property on path ${targetPath}`);\n      }\n      const linkPropertyOption: LinkPropertyOption = {\n        id: id,\n        name: name || id,\n        color: color,\n      };\n      return linkPropertyOption;\n    });\n    linkProp.cachedOptions = linkPropertyOptions;\n    return linkPropertyOptions;\n  };\n\n  parseAdditionalProps(objSchema: any, currPath: Path): Property[] {\n    const additionalProps: Property[] = [];\n    const xAdditionalProps = objSchema[OpenApiTags.AdditionalProps] as xCfAdditionalProps;\n    if (!xAdditionalProps) {\n      return additionalProps;\n    }\n    xAdditionalProps.props.forEach(adtlProp => {\n      var path = [...adtlProp.propPath];\n      if (adtlProp.dynamicIdPropName) {\n        var dynamicValue = 'unknown';\n        const dynamicIdProp = this.getProperty([...currPath, adtlProp.dynamicIdPropName]);\n        if (dynamicIdProp\n          && dynamicIdProp.type === PropertyType.String\n          && dynamicIdProp.subType === PropSubType.Id) {\n          if (!dynamicIdProp.value) {\n            dynamicIdProp.setDefault();\n          }\n          dynamicValue = dynamicIdProp.value!;\n        }\n        const dynamicIdIndex = adtlProp.propPath.indexOf('<&>');\n        // Make sure the dict property is created\n        if (dynamicIdIndex >= 0) {\n          path[dynamicIdIndex] = dynamicValue;\n          const dynamicIdParentProp = this.get(path.slice(0, dynamicIdIndex));\n          if (dynamicIdParentProp.type !== PropertyType.Dict) {\n            throw Error(`Dynamic ID parent path must be a dict under ${dynamicIdParentProp.pathStr}, found ${dynamicIdParentProp.type}`);\n          }\n          if (!dynamicIdParentProp.value) {\n            dynamicIdParentProp.set(true);\n          }\n          if (dynamicIdParentProp.childProperties?.[dynamicValue] === undefined) {\n            dynamicIdParentProp.put(dynamicValue);\n          }\n        }\n      }\n      const parentSchema = this.getSubSchema(path.slice(0, path.length - 1));\n      if (!parentSchema) return;\n      const propName = path[path.length - 1];\n      const propSchema = this.getSubSchema(path);\n      if (!propSchema) return;\n      const isRequired = !!(parentSchema.type === 'array' || parentSchema.required && parentSchema.required.includes(propName));\n      const prop = this.parseProperty(path, isRequired, propSchema);\n      prop.hide = false;\n      additionalProps.push(prop);\n    });\n    return additionalProps;\n  }\n\n  parsePage(path: Path, depth: ResolveDepth, isRequired?: boolean, subSchema?: any): Page {\n    var pageSchema;\n    if (isRequired !== undefined && subSchema !== undefined) {\n      pageSchema = this.mergeAllOf(subSchema);\n    } else {\n      pageSchema = this.getSubSchema(path);\n      if (path.length === 0) {\n        isRequired = true;\n      } else {\n        const parentSchema = this.getSubSchema(path.slice(0, path.length - 1));\n        const propName = path[path.length - 1];\n        isRequired = !!(parentSchema.type === 'array' || parentSchema.required && parentSchema.required.includes(propName));\n      }\n    }\n\n    const xPage = pageSchema[OpenApiTags.Page] as xCfPage;\n    if (!xPage) {\n      throw Error(`No page found on path ${path}`);\n    }\n\n    const fetchChildren = (): PageChildren => {\n      const objSchema = this.skipPaths(pageSchema, ['allOf']);\n      const children: PageChildren = {\n        all: [],\n        pages: [],\n        groups: [],\n        props: [],\n      };\n      const propsSchema = objSchema.properties\n        || (() => { throw Error(`Cannot find 'properties' under path ${path} ${Object.keys(objSchema)}`) })();\n      const requiredProps = objSchema.required || [];\n      Object.keys(propsSchema).forEach(propName => {\n        const propPath = [...path, propName];\n        const propSchema = this.getSubSchema([propName], propsSchema);\n        if (propSchema[OpenApiTags.Page]) {\n          const childPage = this.getPage(\n            propPath,\n            depth === ResolveDepth.Shallow ? ResolveDepth.None : depth,\n            requiredProps.includes(propName),\n            propSchema);\n          children.all.push(childPage);\n          children.pages.push(childPage);\n        } else if (propSchema[OpenApiTags.PageGroup]) {\n          const childGroup = this.getPageGroup(\n            propPath,\n            depth === ResolveDepth.Shallow ? ResolveDepth.None : depth,\n            requiredProps.includes(propName),\n            propSchema);\n          children.all.push(childGroup);\n          children.groups.push(childGroup);\n        } else {\n          const childProp = this.getProperty(\n            propPath,\n            requiredProps.includes(propName),\n            propSchema);\n          children.all.push(childProp);\n          children.props.push(childProp);\n        }\n      });\n      const additionalProps = this.parseAdditionalProps(objSchema, path);\n      children.all.push(...additionalProps);\n      children.props.push(...additionalProps);\n      children.all.sort(this.sortPagesProps);\n      children.pages.sort(this.sortPagesProps);\n      children.groups.sort(this.sortPagesProps);\n      children.props.sort(this.sortPagesProps);\n      return children;\n    };\n    const getChildren = (): PageChildren => {\n      if (!page.cachedChildren || page.cachedChildren === undefined) {\n        page.cachedChildren = fetchChildren();\n      }\n      return page.cachedChildren;\n    };\n    const pathStr = path.join('.');\n    const localSubscribers: { [subscriberId: string]: () => void } = {};\n    var dynamicNameUnsubscribe: (() => void) | undefined = undefined;\n    var colorUnsubscribe: (() => void) | undefined = undefined;\n\n    const page: Page = {\n      key: randomUuid(),\n      defaultValue: isRequired ? true : undefined,\n      name: pathStr,\n      ...xPage,\n      type: 'page',\n      value: this.getValue(path) === undefined ? undefined : true,\n      path: path,\n      pathStr: pathStr,\n      required: isRequired,\n      depth: depth,\n      getChildren: getChildren,\n      set: (val: true | undefined): void => {\n        if (!val && isRequired) throw Error(`Cannot unset a required page for path ${path}`)\n        this.setValue(path, val === true ? {} : undefined);\n        if (val) {\n          page.cachedChildren = fetchChildren();\n          page.cachedChildren.pages.forEach(childPage => childPage.setDefault());\n          page.cachedChildren.groups.forEach(childPageGroup => childPageGroup.setDefault());\n          page.cachedChildren.props.forEach(childProp => childProp.setDefault());\n        } else {\n          page.cachedChildren = {\n            all: [],\n            pages: [],\n            groups: [],\n            props: [],\n          };\n        }\n        page.value = val;\n        page.validateValue(page.value);\n        this.notify(localSubscribers);\n      },\n      setDefault: (): void => {\n        page.set(page.defaultValue);\n      },\n      setRaw: (val: object | undefined): void => {\n        this.setValue(path, val);\n        this.cacheInvalidateChildren(path);\n        if (val !== undefined) {\n          page.value = true;\n          page.cachedChildren = fetchChildren();\n        } else {\n          page.value = undefined;\n          page.cachedChildren = {\n            all: [],\n            pages: [],\n            groups: [],\n            props: [],\n          };\n        }\n        page.validateValue(page.value);\n        this.notify(localSubscribers);\n      },\n      getDynamicName: (): string => {\n        if (!xPage.nameFromProp) {\n          return page.name;\n        }\n        const nameProp = page.getChildren().props.find(p => p.path[p.path.length - 1] === xPage.nameFromProp);\n        if (dynamicNameUnsubscribe === undefined && nameProp) {\n          dynamicNameUnsubscribe = nameProp.subscribe(() => this.notify(localSubscribers));\n        }\n        return (nameProp && nameProp.value)\n          ? nameProp.value + '' : page.name;\n      },\n      getColor: (): string | undefined => {\n        if (!xPage.colorFromProp) {\n          return;\n        }\n        const colorProp = page.getChildren().props.find(p => p.path[p.path.length - 1] === xPage.colorFromProp);\n        if (colorUnsubscribe === undefined && colorProp) {\n          colorUnsubscribe = colorProp.subscribe(() => this.notify(localSubscribers));\n        }\n        return (colorProp && colorProp.value)\n          ? colorProp.value + '' : undefined;\n      },\n      validateValue: (val: true | undefined): void => {\n        if (val === undefined && isRequired) {\n          page.errorMsg = 'Required value';\n        } else {\n          page.errorMsg = undefined;\n        }\n      },\n      subscribe: (callback: () => void): Unsubscribe => {\n        return this._subscribe(callback, localSubscribers);\n      },\n      cachedChildren: depth === ResolveDepth.None ? undefined : fetchChildren(),\n    };\n    page.validateValue(page.value);\n    return page;\n  }\n\n  parsePageGroup(path: Path, depth: ResolveDepth, isRequired?: boolean, subSchema?: any): PageGroup {\n    var pageGroupSchema;\n    if (isRequired !== undefined && subSchema !== undefined) {\n      pageGroupSchema = this.mergeAllOf(subSchema);\n    } else {\n      pageGroupSchema = this.getSubSchema(path);\n      if (path.length === 0) {\n        isRequired = true;\n      } else {\n        const parentSchema = this.getSubSchema(path.slice(0, path.length - 1));\n        const propName = path[path.length - 1];\n        isRequired = !!(parentSchema.type === 'array' || parentSchema.required && parentSchema.required.includes(propName));\n      }\n    }\n\n    const xPageGroup = pageGroupSchema[OpenApiTags.PageGroup] as xCfPageGroup;\n    if (!xPageGroup) {\n      throw Error(`No page group found on path ${path}`);\n    }\n\n    const fetchChildPages = (): Page[] => {\n      const value = this.getValue(path);\n      const count = value && value.length;\n      const pages: Page[] = [];\n      for (let i = 0; i < count; i++) {\n        pages.push(this.getPage(\n          [...path, i],\n          depth === ResolveDepth.Shallow ? ResolveDepth.None : depth,\n          true,\n          pageGroupSchema.items));\n      }\n      return pages;\n    };\n    const getPages = (): Page[] => {\n      if (pageGroup.cachedChildPages === undefined) {\n        pageGroup.cachedChildPages = fetchChildPages();\n      }\n      return pageGroup.cachedChildPages;\n    };\n    const pathStr = path.join('.');\n    const localSubscribers: { [subscriberId: string]: () => void } = {};\n\n    const pageGroup: PageGroup = {\n      key: randomUuid(),\n      defaultValue: isRequired ? true : undefined,\n      name: pathStr,\n      ...xPageGroup,\n      type: 'pagegroup',\n      value: this.getValue(path) === undefined ? undefined : true,\n      path: path,\n      pathStr: pathStr,\n      required: isRequired,\n      depth: depth,\n      minItems: pageGroupSchema.minItems,\n      maxItems: pageGroupSchema.maxItems,\n      getChildPages: getPages,\n      insert: (index?: number): Page => {\n        const arr = this.getOrDefaultValue(path, []);\n        if (index !== undefined) {\n          arr.splice(index, 0, undefined);\n          this.cacheInvalidateChildren(path);\n        } else {\n          arr.push({});\n        }\n        pageGroup.cachedChildPages = fetchChildPages();\n        const newPage = pageGroup.cachedChildPages[\n          index !== undefined\n            ? index\n            : pageGroup.cachedChildPages.length - 1];\n        newPage.setDefault();\n        pageGroup.value = true;\n        pageGroup.validateValue(pageGroup.value);\n        this.notify(localSubscribers);\n        return newPage;\n      },\n      duplicate: (sourceIndex: number): Page => {\n        const arr = this.getOrDefaultValue(path, []);\n        const duplicateData = JSON.parse(JSON.stringify(arr[sourceIndex]));\n        const newPage = pageGroup.insert();\n        newPage.setRaw(duplicateData);\n        if (newPage.nameFromProp) {\n          const nameProp = newPage.getChildren().props.find(p => p.path[p.path.length - 1] === newPage.nameFromProp) as StringProperty;\n          nameProp.set(nameProp.value + ' (Copy)');\n        }\n        return newPage;\n      },\n      moveUp: (index: number): void => {\n        const arr = this.getOrDefaultValue(path, []);\n        if (index <= 0 || arr.length - 1 < index) return;\n        const temp = arr[index - 1];\n        arr[index - 1] = arr[index];\n        arr[index] = temp;\n        this.cacheInvalidateChildren(path);\n        pageGroup.cachedChildPages = fetchChildPages();\n        this.notify(localSubscribers);\n      },\n      moveDown: (index: number): void => {\n        const arr = this.getOrDefaultValue(path, []);\n        if (index < 0 || arr.length - 2 < index) return;\n        const temp = arr[index + 1];\n        arr[index + 1] = arr[index];\n        arr[index] = temp;\n        this.cacheInvalidateChildren(path);\n        pageGroup.cachedChildPages = fetchChildPages();\n        this.notify(localSubscribers);\n      },\n      delete: (index: number): void => {\n        const arr = this.getValue(path);\n        arr.splice(index, 1);\n        this.cacheInvalidateChildren(path);\n        pageGroup.cachedChildPages = depth === ResolveDepth.None ? undefined : fetchChildPages()\n        pageGroup.validateValue(pageGroup.value);\n        this.notify(localSubscribers);\n      },\n      set: (val: true | undefined): void => {\n        if (!val && isRequired) throw Error(`Cannot unset a required page group for path ${path}`)\n        this.setValue(path, val === true\n          ? new Array(pageGroup.minItems ? pageGroup.minItems : 0)\n          : undefined);\n        if (val) {\n          pageGroup.cachedChildPages = fetchChildPages();\n          pageGroup.cachedChildPages.forEach(childPage => childPage.setDefault());\n        } else {\n          pageGroup.cachedChildPages = [];\n        }\n        pageGroup.value = val;\n        pageGroup.validateValue(pageGroup.value);\n        this.notify(localSubscribers);\n      },\n      setDefault: (): void => {\n        pageGroup.set(pageGroup.defaultValue);\n      },\n      setRaw: (val: Array<any> | undefined): void => {\n        this.setValue(path, val);\n        this.cacheInvalidateChildren(path);\n        if (val !== undefined) {\n          pageGroup.value = true;\n          pageGroup.cachedChildPages = fetchChildPages();\n        } else {\n          pageGroup.value = undefined;\n          pageGroup.cachedChildPages = undefined;\n        }\n        pageGroup.validateValue(pageGroup.value);\n        this.notify(localSubscribers);\n      },\n      validateValue: (val: true | undefined): void => {\n        if (val === undefined && isRequired) {\n          pageGroup.errorMsg = 'Required value';\n        } else if (val === true) {\n          const rawValue = this.getValue(path);\n          const count = rawValue === undefined ? 0 : rawValue.length;\n          if (pageGroup.minItems !== undefined && count < pageGroup.minItems) {\n            pageGroup.errorMsg = `Must have at least ${pageGroup.minItems} ${pageGroup.minItems <= 1 ? 'entry' : 'entries'}`;\n          } else if (pageGroup.maxItems !== undefined && count > pageGroup.maxItems) {\n            pageGroup.errorMsg = `Must have at most ${pageGroup.maxItems} ${pageGroup.maxItems <= 1 ? 'entry' : 'entries'}`;\n          }\n          pageGroup.errorMsg = undefined;\n        } else {\n          pageGroup.errorMsg = undefined;\n        }\n      },\n      subscribe: (callback: () => void): Unsubscribe => {\n        return this._subscribe(callback, localSubscribers);\n      },\n      cachedChildPages: depth === ResolveDepth.None ? undefined : fetchChildPages(),\n    };\n    pageGroup.validateValue(pageGroup.value);\n    return pageGroup;\n  }\n\n  parseProperty(path: Path, isRequired?: boolean, subSchema?: any, valueOverride: any = null): Property {\n    if (path.length === 0) {\n      throw Error(`Property cannot be on root on path ${path}`);\n    }\n    var propSchema;\n    if (isRequired !== undefined && subSchema !== undefined) {\n      propSchema = this.mergeAllOf(subSchema);\n    } else {\n      const parentSchema = this.getSubSchema(path.slice(0, path.length - 1));\n      const propName = path[path.length - 1];\n      propSchema = parentSchema.properties && parentSchema.properties[propName]\n        || (() => { throw Error(`Cannot find property on path ${path}`) })();\n      isRequired = !!(parentSchema.type === 'array' || parentSchema.required && parentSchema.required.includes(propName));\n    }\n    if (propSchema[OpenApiTags.Page] || propSchema[OpenApiTags.PageGroup]) {\n      throw Error(`Page or pagegroup found instead of property on path ${path}`);\n    }\n\n    var property: Property;\n    const xProp = propSchema[OpenApiTags.Prop] as xCfProp;\n\n    const localSubscribers: { [subscriberId: string]: () => void } = {};\n    const setFun = (val: any): void => {\n      this.setValue(path, val);\n      property.value = val;\n      property.validateValue(val as never);\n      this.notify(localSubscribers);\n    };\n    const setDefaultFun = (): void => {\n      property.set(property.defaultValue);\n    };\n    const validateRequiredFun = (val: any): void => {\n      if (val === undefined && isRequired) {\n        property.errorMsg = 'Required value';\n      } else {\n        property.errorMsg = undefined;\n      }\n    };\n    const pathStr = path.join('.');\n    const base = {\n      key: randomUuid(),\n      name: pathStr,\n      hide: !!propSchema[OpenApiTags.Hide],\n      ...xProp,\n      type: 'unknown', // Will be overriden by subclass\n      path: path,\n      pathStr: pathStr,\n      required: isRequired,\n      set: setFun,\n      setDefault: setDefaultFun,\n      subscribe: (callback: () => void): Unsubscribe => {\n        return this._subscribe(callback, localSubscribers);\n      },\n      validateValue: validateRequiredFun,\n    };\n    const value = valueOverride === null ? this.getValue(path) : valueOverride;\n    switch (propSchema.type || 'object') {\n      case 'string':\n        if (propSchema.enum) {\n          const items: EnumItem[] = this.getEnumItems(propSchema);\n          property = {\n            defaultValue: isRequired ? (xProp?.defaultValue !== undefined ? xProp.defaultValue : propSchema.enum[0]) : undefined,\n            ...base,\n            type: PropertyType.Enum,\n            value: value,\n            items: items,\n            validateValue: (val: string | undefined): void => {\n              if (val === undefined) {\n                validateRequiredFun(val);\n              } else if (!propSchema.enum.includes(val)) {\n                property.errorMsg = `Can only be one of: ${JSON.stringify(propSchema.enum)}`;\n              } else {\n                property.errorMsg = undefined;\n              }\n            },\n          };\n        } else if (propSchema[OpenApiTags.PropLink]) {\n          const xPropLink = propSchema[OpenApiTags.PropLink] as xCfPropLink;\n          property = {\n            defaultValue: isRequired ? (xProp?.defaultValue !== undefined ? xProp.defaultValue : [...xPropLink.linkPath, 0]) : undefined,\n            ...xPropLink,\n            ...base,\n            type: PropertyType.Link,\n            value: value,\n            allowCreate: !xPropLink.disallowCreate && !xPropLink.linkPath.includes('<$>'),\n            set: (val: string | undefined): void => {\n              (property as LinkProperty).cachedOptions = undefined;\n              setFun(val);\n            },\n            create: (name: string): void => {\n              if (xPropLink.linkPath.includes('<$>')) {\n                throw Error(`Link property ${path} link path ${xPropLink.linkPath} contains variable, not supported currently for creation`);\n              }\n              const targetPath = this.expandRelativePath(xPropLink.linkPath, path);\n              const target = this.get(targetPath);\n              if (target.type !== PropertyType.Array && target.type !== PageGroupType) throw Error(`Link on path ${path} is pointing to a non-array non-page-group on path ${targetPath}`);\n              const newItem: Page | Property = target.insert();\n              var newItemProps;\n              if (newItem.type === PageType) {\n                newItemProps = newItem.getChildren().props;\n              } else if (newItem.type === PropertyType.Object) {\n                newItemProps = newItem.childProperties || []\n              } else {\n                throw Error(`Link property ${path} pointing to array of non-objects on path ${targetPath}`);\n              }\n              const displayProp = newItemProps.find(p => p.path[p.path.length - 1] === xPropLink.displayPropName);\n              if (displayProp === undefined) throw Error(`Link property ${path} target does not have display property name ${xPropLink.displayPropName} on path ${targetPath}`);\n              if (displayProp.type !== PropertyType.String) throw Error(`Link property ${path} target display property name ${xPropLink.displayPropName} is not a string type on path ${displayProp.path}`);\n              displayProp.set(name);\n\n              const idProp = newItemProps.find(p => p.path[p.path.length - 1] === xPropLink.idPropName);\n              if (idProp === undefined) throw Error(`Link property ${path} target does not have id property name ${xPropLink.idPropName} on path ${targetPath}`);\n              if (idProp.type !== PropertyType.String) throw Error(`Link property ${path} target id property name ${xPropLink.idPropName} is not a string type on path ${idProp.path}`);\n              if (idProp.value === undefined) throw Error(`Link property ${path} target id property name ${xPropLink.idPropName} is undefined after just inserted it on path ${idProp.path}`);\n\n              property.set(idProp.value as never);\n            },\n            getOptions: (): LinkPropertyOption[] => this.getLinkOptions(property as LinkProperty, localSubscribers, path),\n            validateValue: (val: string | undefined): void => {\n              if (val === undefined) {\n                validateRequiredFun(val);\n              } else {\n                // Since link validation requires another property,\n                // potentially itself, do this later after property\n                // is fully initialized to prevent a stack overflow\n                setTimeout(() => {\n                  const linkProperty = property as LinkProperty;\n                  const newErrorMsg = linkProperty.getOptions().find(o => o.id === val) === undefined\n                    ? \"Invalid reference\"\n                    : undefined;\n                  if (newErrorMsg !== property.errorMsg) {\n                    property.errorMsg = newErrorMsg;\n                    this.notify(localSubscribers);\n                  }\n                }, 1);\n              }\n            },\n          };\n          break;\n        } else {\n          var defaultValue;\n          if (xProp && xProp.subType === PropSubType.Id) {\n            defaultValue = base.defaultValue !== undefined ? base.defaultValue : randomUuid();\n          } else {\n            defaultValue = isRequired ? (xProp?.defaultValue !== undefined ? xProp.defaultValue : '') : undefined;\n          }\n          var setDefaultStringFun = setDefaultFun;\n          var setStringFun = setFun;\n          if (base.defaultValue && base.defaultValue.includes('<>')) {\n            setDefaultStringFun = (): void => {\n              setStringFun(base.defaultValue\n                .replace(/<>/g, path[path.length - 2]));\n            }\n          }\n          if (xProp && xProp.slugAutoComplete !== undefined) {\n            setStringFun = (val: string | undefined): void => {\n              const prevVal = (property as StringProperty).value;\n              setFun(val);\n              setTimeout(() => {\n                const slugProp = this.getProperty(this.expandRelativePath(xProp.slugAutoComplete!.path, path));\n                if (xProp.slugAutoComplete!.skipFirst !== undefined\n                  && path[xProp.slugAutoComplete!.skipFirst] === 0) {\n                  return;\n                }\n                const prevSlugName = stringToSlug(prevVal);\n                // Only update slug if it hasn't been changed already manually\n                if (slugProp.value === prevSlugName) {\n                  const slugName = stringToSlug(val);\n                  slugProp.set(slugName as never);\n                }\n              }, 1);\n            };\n          }\n          property = {\n            defaultValue: defaultValue,\n            ...base,\n            type: PropertyType.String,\n            value: value,\n            minLength: propSchema.minLength,\n            maxLength: propSchema.maxLength,\n            validation: propSchema.pattern && new RegExp(propSchema.pattern),\n            format: propSchema.format,\n            set: setStringFun,\n            setDefault: setDefaultStringFun,\n            validateValue: (val: string | undefined): void => {\n              const stringProperty = property as StringProperty;\n              if (val === undefined) {\n                validateRequiredFun(val);\n              } else if (stringProperty.validation !== undefined && !stringProperty.validation.test(val)) {\n                property.errorMsg = `Invalid value (Requires ${stringProperty.validation})`;\n              } else if (stringProperty.minLength !== undefined && val.length < stringProperty.minLength) {\n                property.errorMsg = `Must be at least ${stringProperty.minLength} characters`;\n              } else if (stringProperty.maxLength !== undefined && val.length > stringProperty.maxLength) {\n                property.errorMsg = `Must be at most ${stringProperty.maxLength} characters`;\n              } else {\n                property.errorMsg = undefined;\n              }\n            },\n          };\n        }\n        break;\n      case 'number':\n      case 'integer':\n        property = {\n          defaultValue: isRequired ? (xProp?.defaultValue !== undefined ? xProp.defaultValue : 0) : undefined,\n          ...base,\n          type: propSchema.type,\n          value: value,\n          validateValue: (val: number | undefined): void => {\n            const numericProperty = property as IntegerProperty | NumberProperty;\n            if (val === undefined) {\n              validateRequiredFun(val);\n            } else if (property.type === PropertyType.Integer && val % 1 > 0) {\n              property.errorMsg = `Must be a whole number`;\n            } else if (numericProperty.minimum !== undefined && val < numericProperty.minimum) {\n              property.errorMsg = `Must be a minimum of ${numericProperty.minimum}`;\n            } else if (numericProperty.maximum !== undefined && val > numericProperty.maximum) {\n              property.errorMsg = `Must be a maximum of ${numericProperty.maximum}`;\n            } else {\n              property.errorMsg = undefined;\n            }\n          },\n        };\n        break;\n      case 'boolean':\n        property = {\n          defaultValue: isRequired ? (xProp?.defaultValue !== undefined ? xProp.defaultValue : false) : undefined,\n          ...base,\n          type: PropertyType.Boolean,\n          value: value,\n          ...(xProp && xProp.falseAsUndefined && !isRequired ? {\n            required: true,\n            set: (val: boolean | undefined): void => {\n              this.setValue(path, val === true ? true : undefined);\n              property.value = val;\n              property.validateValue(val as never);\n              this.notify(localSubscribers);\n            },\n          } : {}),\n          trueLabel: xProp?.trueLabel,\n          falseLabel: xProp?.falseLabel,\n        };\n        break;\n      case 'array':\n        if (propSchema[OpenApiTags.PropLink]) {\n          if (!propSchema.items || propSchema.items.type !== 'string') {\n            throw Error(`Multi Link must be an array of strings on path ${path}`);\n          }\n          const xPropLink = propSchema[OpenApiTags.PropLink];\n          property = {\n            defaultValue: isRequired ? (base.defaultValue !== undefined ? new Set<string>(base.defaultValue) : new Set<string>()) : undefined,\n            ...xPropLink,\n            ...base,\n            type: PropertyType.LinkMulti,\n            value: value === undefined ? undefined : new Set<string>(value),\n            allowCreate: !xPropLink.disallowCreate && !xPropLink.linkPath.includes('<$>'),\n            minItems: propSchema.minItems,\n            maxItems: propSchema.maxItems,\n            set: (val: Set<string>) => {\n              const linkMultiProperty = property as LinkMultiProperty;\n              linkMultiProperty.value = new Set<string>(val);\n              this.setValue(path, [...linkMultiProperty.value]);\n              (property as LinkMultiProperty).cachedOptions = undefined;\n              linkMultiProperty.validateValue(linkMultiProperty.value);\n              this.notify(localSubscribers);\n            },\n            create: (name: string): void => {\n              if (xPropLink.linkPath.includes('<$>')) {\n                throw Error(`Link property ${path} link path ${xPropLink.linkPath} contains variable, not supported currently for creation`);\n              }\n              const targetPath = this.expandRelativePath(xPropLink.linkPath, path);\n              const target = this.get(targetPath);\n              if (target.type !== PropertyType.Array && target.type !== PageGroupType) throw Error(`Link on path ${path} is pointing to a non-array non-page-group on path ${targetPath}`);\n              const newItem: Page | Property = target.insert();\n              var newItemProps;\n              if (newItem.type === PageType) {\n                newItemProps = newItem.getChildren().props;\n              } else if (newItem.type === PropertyType.Object) {\n                newItemProps = newItem.childProperties || []\n              } else {\n                throw Error(`Link property ${path} pointing to array of non-objects on path ${targetPath}`);\n              }\n              const displayProp = newItemProps.find(p => p.path[p.path.length - 1] === xPropLink.displayPropName);\n              if (displayProp === undefined) throw Error(`Link property ${path} target does not have display property name ${xPropLink.displayPropName} on path ${targetPath}`);\n              if (displayProp.type !== PropertyType.String) throw Error(`Link property ${path} target display property name ${xPropLink.displayPropName} is not a string type on path ${displayProp.path}`);\n              displayProp.set(name);\n\n              const idProp = newItemProps.find(p => p.path[p.path.length - 1] === xPropLink.idPropName);\n              if (idProp === undefined) throw Error(`Link property ${path} target does not have id property name ${xPropLink.idPropName} on path ${targetPath}`);\n              if (idProp.type !== PropertyType.String) throw Error(`Link property ${path} target id property name ${xPropLink.idPropName} is not a string type on path ${idProp.path}`);\n              if (idProp.value === undefined) throw Error(`Link property ${path} target id property name ${xPropLink.idPropName} is undefined after just inserted it on path ${idProp.path}`);\n\n              (property as LinkMultiProperty).insert(idProp.value);\n            },\n            insert: (linkId: string): void => {\n              const linkMultiProperty = property as LinkMultiProperty;\n              if (linkMultiProperty.value === undefined) linkMultiProperty.value = new Set<string>();\n              linkMultiProperty.value.add(linkId);\n              this.setValue(path, [...linkMultiProperty.value]);\n              (property as LinkMultiProperty).cachedOptions = undefined;\n              linkMultiProperty.validateValue(linkMultiProperty.value);\n              this.notify(localSubscribers);\n            },\n            delete: (linkId: string): void => {\n              const linkMultiProperty = property as LinkMultiProperty;\n              if (linkMultiProperty.value === undefined) return;\n              linkMultiProperty.value.delete(linkId);\n              this.setValue(path, [...linkMultiProperty.value]);\n              (property as LinkMultiProperty).cachedOptions = undefined;\n              linkMultiProperty.validateValue(linkMultiProperty.value);\n              this.notify(localSubscribers);\n            },\n            validateValue: (val: Set<string> | undefined): void => {\n              if (val === undefined) {\n                validateRequiredFun(val);\n              } else {\n                const linkMultiProperty = property as LinkMultiProperty;\n                const count = val ? val.size : 0;\n                if (linkMultiProperty.minItems !== undefined && count < linkMultiProperty.minItems) {\n                  property.errorMsg = `Must have at least ${linkMultiProperty.minItems} ${linkMultiProperty.minItems <= 1 ? 'entry' : 'entries'}`;\n                } else if (linkMultiProperty.maxItems !== undefined && count > linkMultiProperty.maxItems) {\n                  property.errorMsg = `Must have at most ${linkMultiProperty.maxItems} ${linkMultiProperty.maxItems <= 1 ? 'entry' : 'entries'}`;\n                } else {\n                  property.errorMsg = undefined;\n                  // Since link validation requires another property,\n                  // potentially itself, do this later after property\n                  // is fully initialized to prevent a stack overflow\n                  setTimeout(() => {\n                    const options = linkMultiProperty.getOptions();\n                    var newErrorMsg: string | undefined = undefined;\n                    for (let valItem in val) {\n                      if (options.find(o => o.id === valItem) === undefined) {\n                        newErrorMsg = \"Option no longer exists\";\n                        break;\n                      }\n                    }\n                    if (newErrorMsg !== property.errorMsg) {\n                      property.errorMsg = newErrorMsg;\n                      this.notify(localSubscribers);\n                    }\n                  }, 1);\n                }\n              }\n            },\n            getOptions: (): LinkPropertyOption[] => this.getLinkOptions(property as LinkProperty, localSubscribers, path),\n          }\n          break;\n        }\n        const fetchChildPropertiesArray = (): Property[] | undefined => {\n          const arr = this.getValue(path);\n          var childProperties: Property[] | undefined;\n          if (arr) {\n            childProperties = [];\n            for (let i = 0; i < arr.length; i++) {\n              childProperties.push(this.getProperty([...path, i], true, propSchema.items));\n            }\n            childProperties.push(...this.parseAdditionalProps(propSchema, path));\n            childProperties.sort(this.sortPagesProps);\n          }\n          return childProperties;\n        }\n        property = {\n          defaultValue: isRequired ? true : undefined,\n          ...base,\n          type: PropertyType.Array,\n          value: value === undefined ? undefined : true,\n          minItems: propSchema.minItems,\n          maxItems: propSchema.maxItems,\n          uniqueItems: propSchema.uniqueItems,\n          childType: propSchema.items.enum ? 'enum' : (propSchema.items.type || 'object'),\n          childEnumItems: propSchema.items.enum ? this.getEnumItems(propSchema.items) : undefined,\n          childProperties: fetchChildPropertiesArray(),\n          set: (val: true | undefined): void => {\n            if (!val && isRequired) throw Error(`Cannot unset a required array prop for path ${path}`)\n            const arrayProperty = property as ArrayProperty;\n            if (val !== undefined) {\n              this.setValue(path, new Array(arrayProperty.minItems ? arrayProperty.minItems : 0));\n              arrayProperty.childProperties = fetchChildPropertiesArray();\n              arrayProperty.childProperties && arrayProperty.childProperties.forEach(p => p.setDefault());\n            } else {\n              this.setValue(path, undefined);\n              arrayProperty.childProperties = undefined;\n            }\n            arrayProperty.value = val;\n            arrayProperty.validateValue(val);\n            this.notify(localSubscribers);\n          },\n          setRaw: (val: Array<any> | undefined): void => {\n            this.setValue(path, val);\n            this.cacheInvalidateChildren(path);\n            const arrayProperty = property as ArrayProperty;\n            if (val !== undefined) {\n              arrayProperty.value = true;\n              arrayProperty.childProperties = fetchChildPropertiesArray();\n            } else {\n              arrayProperty.value = undefined;\n              arrayProperty.childProperties = undefined;\n            }\n            arrayProperty.validateValue(arrayProperty.value);\n            this.notify(localSubscribers);\n          },\n          setDefault: (): void => {\n            const arrayProperty = property as ArrayProperty;\n            arrayProperty.set(arrayProperty.defaultValue);\n          },\n          insert: (index?: number): Property => {\n            const arr = this.getOrDefaultValue(path, []);\n            if (index !== undefined) {\n              arr.splice(index, 0, undefined);\n              this.cacheInvalidateChildren(path);\n            } else {\n              arr.push(undefined);\n            }\n            const arrayProperty: ArrayProperty = (property as ArrayProperty);\n            arrayProperty.childProperties = fetchChildPropertiesArray();\n            const newProperty = arrayProperty.childProperties![\n              index !== undefined\n                ? index\n                : arrayProperty.childProperties!.length - 1];\n            newProperty.setDefault();\n            property.value = true;\n            arrayProperty.validateValue(arrayProperty.value);\n            this.notify(localSubscribers);\n            return newProperty;\n          },\n          duplicate: (sourceIndex: number): Property => {\n            const arr = this.getValue(path);\n            const duplicateData = JSON.parse(JSON.stringify(arr[sourceIndex]));\n            const arrayProperty = property as ArrayProperty;\n            const newProp = arrayProperty.insert();\n            if (newProp.type === PropertyType.Object || newProp.type === PropertyType.Array) {\n              newProp.setRaw(duplicateData);\n            } else {\n              newProp.set(duplicateData);\n            }\n            return newProp;\n          },\n          moveUp: (index: number): void => {\n            const arr = this.getOrDefaultValue(path, []);\n            if (index <= 0 || arr.length - 1 < index) return;\n            const temp = arr[index - 1];\n            arr[index - 1] = arr[index];\n            arr[index] = temp;\n            this.cacheInvalidateChildren(path);\n            (property as ArrayProperty).childProperties = fetchChildPropertiesArray();\n            this.notify(localSubscribers);\n          },\n          moveDown: (index: number): void => {\n            const arr = this.getOrDefaultValue(path, []);\n            if (index < 0 || arr.length - 2 < index) return;\n            const temp = arr[index + 1];\n            arr[index + 1] = arr[index];\n            arr[index] = temp;\n            this.cacheInvalidateChildren(path);\n            (property as ArrayProperty).childProperties = fetchChildPropertiesArray();\n            this.notify(localSubscribers);\n          },\n          delete: (index: number): void => {\n            if (!property.value) return;\n            const arrayProperty = property as ArrayProperty;\n            const arr = this.getValue(path);\n            arr.splice(index, 1);\n            this.cacheInvalidateChildren(path);\n            arrayProperty.childProperties = fetchChildPropertiesArray();\n            arrayProperty.validateValue(arrayProperty.value);\n            this.notify(localSubscribers);\n          },\n          validateValue: (val: true | undefined): void => {\n            if (val === undefined) {\n              validateRequiredFun(val);\n            } else {\n              const arrayProperty = property as ArrayProperty;\n              const count = arrayProperty.childProperties ? arrayProperty.childProperties.length : 0;\n              if (arrayProperty.minItems !== undefined && count < arrayProperty.minItems) {\n                property.errorMsg = `Must have at least ${arrayProperty.minItems} ${arrayProperty.minItems <= 1 ? 'entry' : 'entries'}`;\n              } else if (arrayProperty.maxItems !== undefined && count > arrayProperty.maxItems) {\n                property.errorMsg = `Must have at most ${arrayProperty.maxItems} ${arrayProperty.maxItems <= 1 ? 'entry' : 'entries'}`;\n              } else if (arrayProperty.uniqueItems !== undefined && (new Set(this.getValue(path))).size !== (arrayProperty.childProperties || []).length) {\n                property.errorMsg = `Must have unique entries`;\n              } else {\n                property.errorMsg = undefined;\n              }\n            }\n          },\n        };\n        break;\n      case 'object':\n        if (propSchema.additionalProperties && propSchema.properties) {\n          throw Error(`Object with both dict and object items unsupported yet for path ${path}`);\n        }\n        if (propSchema.additionalProperties) {\n          const fetchChildPropertiesDict = (): { [key: string]: Property } | undefined => {\n            const obj = this.getValue(path);\n            var childProperties: { [key: string]: Property } | undefined;\n            if (obj) {\n              childProperties = {};\n              const childPropSchema = propSchema.additionalProperties;\n              const requiredProps = propSchema.required || [];\n              Object.keys(obj).forEach(propName => {\n                childProperties![propName] = this.getProperty(\n                  [...path, propName],\n                  requiredProps.includes(propName),\n                  childPropSchema);\n              });\n            }\n            return childProperties;\n          }\n          property = {\n            defaultValue: isRequired ? true : undefined,\n            ...base,\n            type: PropertyType.Dict,\n            value: value === undefined ? undefined : true,\n            childProperties: fetchChildPropertiesDict(),\n            set: (val: true | undefined): void => {\n              if (!val && isRequired) throw Error(`Cannot unset a required dict prop for path ${path}`)\n              const dictProperty = property as DictProperty;\n              if (val) {\n                this.setValue(path, {});\n                dictProperty.childProperties = {};\n              } else {\n                this.setValue(path, undefined);\n                dictProperty.childProperties = undefined;\n              }\n              dictProperty.value = val;\n              dictProperty.validateValue(val);\n              this.notify(localSubscribers);\n            },\n            setRaw: (val: object | undefined): void => {\n              this.setValue(path, val);\n              this.cacheInvalidateChildren(path);\n              const dictProperty = property as DictProperty;\n              if (val !== undefined) {\n                dictProperty.value = true;\n                dictProperty.childProperties = fetchChildPropertiesDict();\n              } else {\n                dictProperty.value = undefined;\n                dictProperty.childProperties = undefined;\n              }\n              dictProperty.validateValue(dictProperty.value);\n              this.notify(localSubscribers);\n            },\n            setDefault: (): void => {\n              const dictProperty = property as DictProperty;\n              dictProperty.set(dictProperty.defaultValue);\n            },\n            put: (key: string): Property => {\n              const dictProperty = property as DictProperty;\n              const dict = this.getOrDefaultValue(path, {});\n              dict[key] = undefined;\n              property.value = true;\n              dictProperty.childProperties = fetchChildPropertiesDict();\n              const newProperty = dictProperty.childProperties![key]!;\n              newProperty.setDefault();\n              dictProperty.validateValue(dictProperty.value);\n              this.notify(localSubscribers);\n              return newProperty;\n            },\n            delete: (key: string): void => {\n              if (!property.value) return;\n              const dictProperty = property as DictProperty;\n              const dict = this.getValue(path);\n              delete dict[key];\n              this.cacheInvalidateChildren(path);\n              dictProperty.childProperties = fetchChildPropertiesDict();\n              dictProperty.validateValue(dictProperty.value);\n              this.notify(localSubscribers);\n            },\n          };\n          break;\n        }\n        const fetchChildPropertiesObject = (): Property[] | undefined => {\n          const obj = this.getValue(path);\n          var childProperties: Property[] | undefined;\n          if (obj) {\n            childProperties = [];\n            const childPropsSchema = propSchema.properties\n              || (() => { throw Error(`Cannot find 'properties' under path ${path}`) })();\n            const requiredProps = propSchema.required || [];\n            Object.keys(childPropsSchema).forEach(propName => {\n              const objectPropSchema = this.getSubSchema([propName], childPropsSchema);\n              childProperties!.push(this.getProperty(\n                [...path, propName],\n                requiredProps.includes(propName),\n                objectPropSchema));\n            });\n            childProperties.push(...this.parseAdditionalProps(propSchema, path));\n            childProperties.sort(this.sortPagesProps);\n          }\n          return childProperties;\n        }\n        property = {\n          defaultValue: isRequired ? true : undefined,\n          ...base,\n          type: PropertyType.Object,\n          value: value === undefined ? undefined : true,\n          childProperties: fetchChildPropertiesObject(),\n          set: (val: true | undefined): void => {\n            if (!val && isRequired) throw Error(`Cannot unset a required object prop for path ${path}`)\n            const objectProperty = property as ObjectProperty;\n            if (val) {\n              this.setValue(path, {});\n              objectProperty.childProperties = fetchChildPropertiesObject();\n              objectProperty.childProperties && objectProperty.childProperties.forEach(childProp => childProp.setDefault());\n            } else {\n              this.setValue(path, undefined);\n              objectProperty.childProperties = undefined;\n            }\n            objectProperty.value = val;\n            objectProperty.validateValue(val);\n            this.notify(localSubscribers);\n          },\n          setRaw: (val: object | undefined): void => {\n            this.setValue(path, val);\n            this.cacheInvalidateChildren(path);\n            const objectProperty = property as ObjectProperty;\n            if (val !== undefined) {\n              objectProperty.value = true;\n              objectProperty.childProperties = fetchChildPropertiesObject();\n            } else {\n              objectProperty.value = undefined;\n              objectProperty.childProperties = undefined;\n            }\n            objectProperty.validateValue(objectProperty.value);\n            this.notify(localSubscribers);\n          },\n          setDefault: (): void => {\n            const objectProperty = property as ObjectProperty;\n            objectProperty.set(objectProperty.defaultValue);\n          },\n        };\n        break;\n      default:\n        throw Error(`Unknown type ${propSchema.type} in path ${path}`);\n    }\n    property.validateValue(property.value as never);\n    return property;\n  }\n}\n","/Users/matus/dev/clearflask/clearflask-frontend/src/api/serverAdmin.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/loadingScreen.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/vhUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/windowIso.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/ScrollAnchor.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/EmojiPicker.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/RichEditor.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/MuiSnackbarProvider.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/App.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/Loading.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/ServerErrorNotifier.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/PostStatus.tsx",["758"],"import { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport OpenIcon from '@material-ui/icons/OpenInNew';\nimport QueryString from 'query-string';\nimport React, { Component } from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport * as Client from '../api/client';\nimport { Server } from '../api/server';\nimport WebNotification from '../common/notification/webNotification';\nimport Promised from '../common/Promised';\nimport { detectEnv, Environment } from '../common/util/detectEnv';\nimport windowIso from '../common/windowIso';\n\nexport class PostStatusConfigDef {\n  fontSize?: number | string;\n  fontFamily?: string;\n  color?: string;\n  backgroundColor?: string;\n  fontWeight?: number;\n  alignItems?: string;\n  justifyContent?: string;\n  textTransform?: string;\n}\nexport interface PostStatusConfig extends PostStatusConfigDef { };\n\nconst styles = (theme: Theme) => createStyles({\n  linkContainer: {\n    flexGrow: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent',\n  },\n  link: {\n    color: 'inherit',\n    outline: 0,\n    textDecoration: 'inherit',\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\ninterface Props {\n  postId: string;\n}\ninterface State {\n}\nclass PostStatus extends Component<Props & RouteComponentProps & WithStyles<typeof styles, true>, State> {\n  state: State = {};\n  dataPromise: Promise<[Client.VersionedConfig, Client.UserMeWithBalance | undefined, Client.IdeaWithVote]>;\n\n  constructor(props) {\n    super(props);\n\n    this.dataPromise = this.fetchData(props);\n  }\n\n  async fetchData(props: Props): Promise<[Client.VersionedConfig, Client.UserMeWithBalance | undefined, Client.IdeaWithVote]> {\n    var server: Server | undefined;\n    if (detectEnv() === Environment.DEVELOPMENT_FRONTEND) {\n      const DemoApp = await import(/* webpackChunkName: \"demoApp\" */'../site/DemoApp');\n      const project = await DemoApp.getProject(\n        templater => templater.workflowFeatures(templater.demoCategory()),\n        mock => mock.mockFakeIdeaWithComments(props.postId, config => ({\n          statusId: config.content.categories[0]?.workflow.statuses[3]?.statusId,\n        })),\n        { suppressSetTitle: true });\n      server = project.server;\n    } else {\n      server = new Server();\n    }\n\n    const configAndUserBindPromise = WebNotification.getInstance().getPermission().then(subscriptionResult => server!.dispatch().configGetAndUserBind({\n      slug: windowIso.location.hostname,\n      userBind: {\n        browserPushToken: (subscriptionResult !== undefined && subscriptionResult.type === 'success')\n          ? subscriptionResult.token : undefined,\n      },\n    }));\n\n    const postPromise = server.dispatch().ideaGet({\n      projectId: server.getProjectId(),\n      ideaId: props.postId,\n    });\n\n    const [configAndUserBind, post] = await Promise.all([configAndUserBindPromise, postPromise]);\n\n    if (!configAndUserBind.config) {\n      throw new Error('Permission denied');\n    }\n\n    return [configAndUserBind.config, configAndUserBind.user, post];\n  }\n\n  render() {\n    const queryParams = QueryString.parse(this.props.location.search);\n    const statusConfig = queryParams as PostStatusConfig;\n\n    return (\n      <Promised\n        promise={this.dataPromise}\n        render={([config, user, post]) => {\n\n          var status = config.config\n            .content\n            .categories\n            .find(c => c.categoryId === post.categoryId)\n            ?.workflow\n            .statuses\n            .find(s => s.statusId === post.statusId);\n          if (!status && detectEnv() === Environment.DEVELOPMENT_FRONTEND) {\n            status = {\n              name: 'Planned',\n              nextStatusIds: [],\n              color: '#3B67AE',\n              statusId: 'a',\n              disableFunding: false,\n              disableExpressions: false,\n              disableVoting: false,\n              disableComments: false,\n              disableIdeaEdits: true\n            };\n          }\n          if (!status) {\n            console.log('Failed to load, post has no status', config, user, post);\n            return null;\n          };\n\n          const src = `${windowIso.location.origin}/post/${post.ideaId}`;\n\n          return (\n            <div\n              className={this.props.classes.linkContainer}\n              style={{\n                color: statusConfig.color || status.color,\n                fontSize: statusConfig.fontSize,\n                fontFamily: statusConfig.fontFamily,\n                backgroundColor: statusConfig.backgroundColor,\n                fontWeight: statusConfig.fontWeight,\n                alignItems: statusConfig.alignItems,\n                justifyContent: statusConfig.justifyContent,\n                textTransform: statusConfig.textTransform as any,\n              }}\n            >\n              <a\n                href={src}\n                target='_blank' // eslint-disable-line react/jsx-no-target-blank\n                rel='noopener nofollow'\n                className={this.props.classes.link}\n              >\n                {status.name}\n                &nbsp;\n                <OpenIcon fontSize='inherit' />\n              </a>\n            </div>\n          );\n        }}\n        renderError={err => {\n          console.log('Failed to load:', err);\n          return null;\n        }}\n        renderLoading={() => null}\n      />\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(PostStatus);\n","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/CaptchaChallenger.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/InvoicePage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/HotjarWrapperMain.tsx",["759"],"import React from 'react';\nimport ServerAdmin from '../api/serverAdmin';\nimport HotjarWrapper from './HotjarWrapper';\n\nexport default () => (\n  <HotjarWrapper\n    trackerCode={ServerAdmin.get().isSuperAdminLoggedIn()\n      ? undefined : 2132039}\n  />\n);\n","/Users/matus/dev/clearflask/clearflask-frontend/src/site/IntercomWrapperMain.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/Dashboard.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/AppThemeProvider.tsx",["760"],"import { createMuiTheme, CssBaseline, Theme } from '@material-ui/core';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints';\nimport { ThemeOptions } from '@material-ui/core/styles/createMuiTheme';\nimport { ComponentsProps } from '@material-ui/core/styles/props';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as Client from '../api/client';\nimport { ReduxState } from '../api/server';\nimport windowIso from '../common/windowIso';\n\ninterface ThemeCustomProps {\n  disableTransitions?: boolean;\n  funding?: string;\n  isInsideContainer?: boolean;\n  expressionGrayscale?: number;\n  explorerExpandTimeout?: number;\n}\n\ndeclare module '@material-ui/core/styles/createMuiTheme' {\n  interface Theme extends ThemeCustomProps { }\n  interface ThemeOptions extends ThemeCustomProps { }\n}\n\nexport const ComponentPropsOverrides: ComponentsProps = {\n  MuiModal: {\n    disableEnforceFocus: true,\n  },\n  MuiWithWidth: {\n    noSSR: true,\n  },\n};\n\ninterface Props {\n  containerStyle?: React.CSSProperties,\n  supressCssBaseline?: boolean;\n  isInsideContainer?: boolean;\n  breakpoints?: { [key in Breakpoint]: number };\n  appRootId: string;\n  // connect\n  config?: Client.Config;\n}\nclass AppThemeProvider extends Component<Props> {\n  render() {\n    var expressionGrayscale: number | undefined = undefined;\n    switch (this.props.config && this.props.config.style.palette.expressionColor) {\n      case Client.PaletteExpressionColorEnum.Gray:\n        expressionGrayscale = 100;\n        break;\n      case Client.PaletteExpressionColorEnum.Washed:\n        expressionGrayscale = 50;\n        break;\n    }\n    var theme: Theme | undefined;\n    if (this.props.config) {\n      theme = createMuiTheme({\n        disableTransitions: !this.props.config.style.animation.enableTransitions,\n        funding: this.props.config.style.palette.funding\n          || this.props.config.style.palette.primary,\n        // Optional green color\n        // || ( this.props.config.style.palette.darkMode ? '#6ca869' : '#89c586' ),\n        isInsideContainer: !!this.props.isInsideContainer,\n        expressionGrayscale: expressionGrayscale,\n        explorerExpandTimeout: 500,\n        palette: {\n          type: this.props.config.style.palette.darkMode ? 'dark' : 'light',\n          primary: {\n            main: this.props.config.style.palette.primary\n              || this.props.config.style.palette.darkMode ? '#5cb7a2' : '#218774',\n          },\n          ...(this.props.config.style.palette.text ? {\n            text: {\n              primary: this.props.config.style.palette.text,\n            }\n          } : {}),\n          background: {\n            ...(this.props.config.style.palette.background ? { default: this.props.config.style.palette.background } : {}),\n            ...(this.props.config.style.palette.backgroundPaper ? { paper: this.props.config.style.palette.backgroundPaper } : {}),\n          },\n        },\n        typography: {\n          // TODO sanitize input, currently you can inject custom css with \"; inject: me\"\n          fontFamily: this.props.config.style.typography.fontFamily || '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n          fontSize: this.props.config.style.typography.fontSize || 14,\n        },\n        transitions: {\n          ...(this.props.config.style.animation.enableTransitions ? {} : {\n            create: () => 'none',\n            duration: {\n              shortest: 0,\n              shorter: 0,\n              short: 0,\n              standard: 0,\n              complex: 0,\n              enteringScreen: 0,\n              leavingScreen: 0,\n            },\n          }),\n        },\n        breakpoints: {\n          ...(this.props.breakpoints !== undefined ? {\n            values: this.props.breakpoints,\n          } : {}),\n        },\n        props: {\n          ...ComponentPropsOverrides,\n          MuiDialog: {\n            ...(!windowIso.isSsr ? {\n              container: () => document.getElementById(this.props.appRootId)!,\n            } : {}),\n            ...(this.props.isInsideContainer ? {\n              style: { position: 'absolute' },\n              BackdropProps: { style: { position: 'absolute' } },\n            } : {}),\n          },\n          MuiButtonBase: {\n            ...(!this.props.config.style.animation.enableTransitions ? {\n              disableRipple: true,\n            } : {}),\n          },\n        },\n      })\n    } else {\n      theme = createMuiTheme();\n    }\n\n    return (\n      <MuiThemeProvider theme={theme}>\n        {!this.props.supressCssBaseline && (<CssBaseline />)}\n        <div style={{\n          height: '100%',\n          background: theme.palette.background.default,\n          color: theme.palette.text.primary,\n          ...(this.props.containerStyle || {}),\n        }}>\n          {this.props.children}\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default connect<any, any, any, any>((state: ReduxState, ownProps: Props) => {\n  return {\n    configver: state.conf.ver, // force rerender on config change\n    config: state.conf.conf,\n  }\n})(AppThemeProvider);\n","/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/EnvironmentNotifier.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/Site.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/arrayUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/slugger.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/auth.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/richEditorUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/uuid.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/api/server.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/notification/webNotification.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/quill-format-block.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/quill-format-link.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/ClosablePopper.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/RichViewer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/DemoApp.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Promised.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/TrialSignupPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/PricingPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/ContactPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/LegalPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/SsoSuccessDemoPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/LandingPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/SigninPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/titleUtil.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/routerUtil.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/ErrorPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/MuiAnimatedSwitch.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/DropdownButton.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/WelcomePage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/UsersPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/UserSelection.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/debounce.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/SettingsPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/DashboardHome.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CreatedPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CommentsPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CreatePage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/BillingPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/MediaQuery.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/UserDisplayMe.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Layout.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Page.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/ProjectSettings.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/ContentScroll.tsx",["761"],"import { Theme } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\nimport React from 'react';\n\nexport enum Side {\n  Center = 'center',\n  Left = 'left',\n  Right = 'right',\n}\n\ninterface Props {\n  style?: React.CSSProperties,\n  className?: string;\n  isVertical?: boolean;\n  side?: Side;\n  backgroundColor?: string;\n}\n\nexport const RadialSize = 15;\n\nexport const contentScrollApplyStyles = (theme: Theme, side: Side = Side.Center, isVertical: boolean = false, backgroundColor: string = theme.palette.background.default): Record<string, string | CSSProperties> => {\n  var startHor;\n  var startVer;\n  var endHor;\n  var endVer;\n  var radialMultiplier;\n  if (isVertical) {\n    startVer = 'top';\n    endVer = 'bottom';\n    switch (side) {\n      default:\n      case 'center':\n        startHor = endHor = 'center';\n        radialMultiplier = 1;\n        break;\n      case 'left':\n        startHor = endHor = 'right';\n        radialMultiplier = 2;\n        break;\n      case 'right':\n        startHor = endHor = 'center';\n        radialMultiplier = 2;\n        break;\n    }\n  } else {\n    startHor = 'left';\n    endHor = 'right';\n    switch (side) {\n      default:\n      case 'center':\n        startVer = endVer = 'center';\n        radialMultiplier = 1;\n        break;\n      case 'left':\n        startVer = endVer = 'top';\n        radialMultiplier = 2;\n        break;\n      case 'right':\n        startVer = endVer = 'bottom';\n        radialMultiplier = 2;\n        break;\n    }\n  }\n  const ellipseShape = isVertical ? `50% ${RadialSize / radialMultiplier}px` : `${RadialSize / radialMultiplier}px 50%`;\n  return {\n    background: `radial-gradient(ellipse ${ellipseShape} at ${startHor} ${startVer}, ${backgroundColor} ${100 * radialMultiplier}%, rgba(0,0,0,0) ${200 * radialMultiplier}%),`\n      + `radial-gradient(ellipse ${ellipseShape} at ${endHor} ${endVer}, ${backgroundColor} ${100 * radialMultiplier}%, rgba(0,0,0,0) ${200 * radialMultiplier}%),`\n      + `radial-gradient(ellipse ${ellipseShape} at ${startHor} ${startVer}, ${fade(theme.palette.common.black, 0.2)} 0px, rgba(0,0,0,0) ${100 * radialMultiplier}%),`\n      + `radial-gradient(ellipse ${ellipseShape} at ${endHor} ${endVer}, ${fade(theme.palette.common.black, 0.2)} 0px, rgba(0,0,0,0) ${100 * radialMultiplier}%)`,\n    overflow: 'hidden',\n    [isVertical ? 'overflowY' : 'overflowX']: 'scroll',\n    backgroundAttachment: 'local, local, scroll, scroll',\n    /* Hide scrollbars */\n    scrollbarWidth: 'none', // Firefox\n    msOverflowStyle: 'none', //IE 10+\n    '&::-webkit-scrollbar': {\n      width: 0,\n      height: 0,\n      background: 'transparent',\n    },\n  };\n};\n","/Users/matus/dev/clearflask/clearflask-frontend/src/app/ErrorMsg.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/PricingSlider.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/MarkdownElement.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/SubmitButton.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Message.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/injects/WorkflowPreview.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/RoadmapControls.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/HorizontalPanels.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/TemplateDemo.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/Hero.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/PrioritizationControlsVoting.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/PrioritizationControlsExpressions.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/PrioritizationControlsCredits.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/Demo.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/Block.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/BlockContent.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/PostStatusIframe.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/UserExplorer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/UpdatableField.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/UserDisplay.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/CategoryStats.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/Loader.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/DividerCorner.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/OnboardingDemo.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/dashboard/BillingChangePlanDialog.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PanelSearch.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PanelPost.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/SelectionPicker.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/Panel.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CommentList.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/PricingPlan.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/StripeCreditCard.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/csvUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Property.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CategorySelect.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/UpgradeWrapper.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/PresetWidget.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/textToHash.js",[],["762","763"],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/prism.js",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/historyUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/notification/mobileNotification.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/animateUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/landing/TemplateDemoControls.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Scale.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/FakeBrowser.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/CreditView.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/ModStar.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/Post.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/DividerVertical.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/AcceptTerms.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/LoadMoreButton.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/HelpPopper.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/CreditCard.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Overlay.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/TableProp.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/pageVisibility.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/refUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/Delimited.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/VotingControl.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PostEdit.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/LogIn.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/FundingControl.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/FundingBar.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Truncate.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CommentReply.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/ModAction.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/InViewObserver.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/mathutil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/TagSelect.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/DigitsInput.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/Hr.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/CreditFractionView.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/GradientFade.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/StatusSelect.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/Comment.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/DeviceContainer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/DemoPushPermissionDialog.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/ExplorerTemplate.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/imageUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/injects/CreditPreview.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/LoadingPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/IdeaExplorer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/emailDisposableList.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/CommentEdit.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/DropdownTab.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Menu.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/Crumbs.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/config/settings/ConfigView.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/SubscriptionStatusNotifier.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/UserPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PostPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/IntercomWrapper.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/HotjarWrapper.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/PushNotificationListener.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/PrivateProjectLogin.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/AnimatedRoutes.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/Header.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/utils/CustomerExternalTrackers.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/SsoSuccessPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/CustomPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/BasePage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/BankPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/IntercomWrapperCustomer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/AccountPage.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/intercomUtil.js",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/util/stringUtil.ts",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/common/UserContributions.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/UserEdit.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/NotificationBadge.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/NotificationPopup.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/site/HotjarWrapperCustomer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/TemplateLiquid.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/Footer.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/TransactionList.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/PanelComment.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/comps/NotificationList.tsx",[],"/Users/matus/dev/clearflask/clearflask-frontend/src/app/PoweredBy.tsx",[],["764","765"],{"ruleId":"766","replacedBy":"767"},{"ruleId":"768","replacedBy":"769"},{"ruleId":"770","severity":1,"message":"771","line":164,"column":14,"nodeType":"772","messageId":"773","endLine":164,"endColumn":32},{"ruleId":"770","severity":1,"message":"774","line":183,"column":14,"nodeType":"772","messageId":"773","endLine":183,"endColumn":42},{"ruleId":"775","severity":1,"message":"776","line":143,"column":15,"nodeType":"777","endLine":148,"endColumn":16},{"ruleId":"778","severity":1,"message":"779","line":5,"column":1,"nodeType":"780","endLine":10,"endColumn":3},{"ruleId":"781","severity":1,"message":"782","line":4,"column":10,"nodeType":"772","messageId":"783","endLine":4,"endColumn":22},{"ruleId":"781","severity":1,"message":"784","line":12,"column":11,"nodeType":"772","messageId":"783","endLine":12,"endColumn":16},{"ruleId":"766","replacedBy":"767"},{"ruleId":"768","replacedBy":"769"},{"ruleId":"766","replacedBy":"785"},{"ruleId":"768","replacedBy":"786"},"no-native-reassign",["787"],"no-negated-in-lhs",["788"],"@typescript-eslint/no-redeclare","'PageType' is already defined.","Identifier","redeclared","'PageGroupType' is already defined.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'ThemeOptions' is defined but never used.","unusedVar","'Props' is defined but never used.",["787"],["788"],"no-global-assign","no-unsafe-negation"]