/* tslint:disable */
/**
 * ClearFlask Connect API
 * ClearFlask API documentation.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// eslint-disable-next-line no-unused-vars
import * as runtime from '../runtime';
// eslint-disable-next-line no-unused-vars
import {
    Cert,
    CertFromJSON,
    CertToJSON,
    Challenge,
    ChallengeFromJSON,
    ChallengeToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Keypair,
    KeypairFromJSON,
    KeypairToJSON,
} from '../models';

export interface AccountKeypairDeleteConnectRequest {
    id: string;
}

export interface AccountKeypairGetConnectRequest {
    id: string;
}

export interface AccountKeypairPutConnectRequest {
    id: string;
    keypair: Keypair;
}

export interface CertChallengeDeleteConnectRequest {
    key: string;
}

export interface CertChallengeGetConnectRequest {
    key: string;
}

export interface CertChallengePutConnectRequest {
    key: string;
    challenge: Challenge;
}

export interface CertDeleteConnectRequest {
    domain: string;
}

export interface CertGetConnectRequest {
    domain: string;
}

export interface CertKeypairDeleteConnectRequest {
    id: string;
}

export interface CertKeypairGetConnectRequest {
    id: string;
}

export interface CertKeypairPutConnectRequest {
    id: string;
    keypair: Keypair;
}

export interface CertPutConnectRequest {
    domain: string;
    cert: Cert;
}

/**
 * no description
 */
export interface SniConnectApiInterface {

    /**
     */
    accountKeypairDeleteConnect(requestParameters: AccountKeypairDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    accountKeypairGetConnect(requestParameters: AccountKeypairGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Keypair>;

    /**
     */
    accountKeypairPutConnect(requestParameters: AccountKeypairPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    certChallengeDeleteConnect(requestParameters: CertChallengeDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    certChallengeGetConnect(requestParameters: CertChallengeGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Challenge>;

    /**
     */
    certChallengePutConnect(requestParameters: CertChallengePutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    certDeleteConnect(requestParameters: CertDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    certGetConnect(requestParameters: CertGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Cert>;

    /**
     */
    certKeypairDeleteConnect(requestParameters: CertKeypairDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    certKeypairGetConnect(requestParameters: CertKeypairGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Keypair>;

    /**
     */
    certKeypairPutConnect(requestParameters: CertKeypairPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;

    /**
     */
    certPutConnect(requestParameters: CertPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void>;
}

/**
 * no description
 */
export class SniConnectApi extends runtime.BaseAPI implements SniConnectApiInterface {

    /**
     */
    async accountKeypairDeleteConnectRaw(requestParameters: AccountKeypairDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountKeypairDeleteConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/account/keypair`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountKeypairDeleteConnect(requestParameters: AccountKeypairDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.accountKeypairDeleteConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async accountKeypairGetConnectRaw(requestParameters: AccountKeypairGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<Keypair>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountKeypairGetConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/account/keypair`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeypairFromJSON(jsonValue));
    }

    /**
     */
    async accountKeypairGetConnect(requestParameters: AccountKeypairGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Keypair> {
        const response = await this.accountKeypairGetConnectRaw(requestParameters, headerExtra);
        return await response.value();
    }

    /**
     */
    async accountKeypairPutConnectRaw(requestParameters: AccountKeypairPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling accountKeypairPutConnect.');
        }

        if (requestParameters.keypair === null || requestParameters.keypair === undefined) {
            throw new runtime.RequiredError('keypair','Required parameter requestParameters.keypair was null or undefined when calling accountKeypairPutConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connect/account/keypair`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KeypairToJSON(requestParameters.keypair),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async accountKeypairPutConnect(requestParameters: AccountKeypairPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.accountKeypairPutConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async certChallengeDeleteConnectRaw(requestParameters: CertChallengeDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling certChallengeDeleteConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/cert/challenge`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certChallengeDeleteConnect(requestParameters: CertChallengeDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.certChallengeDeleteConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async certChallengeGetConnectRaw(requestParameters: CertChallengeGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<Challenge>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling certChallengeGetConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/cert/challenge`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeFromJSON(jsonValue));
    }

    /**
     */
    async certChallengeGetConnect(requestParameters: CertChallengeGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Challenge> {
        const response = await this.certChallengeGetConnectRaw(requestParameters, headerExtra);
        return await response.value();
    }

    /**
     */
    async certChallengePutConnectRaw(requestParameters: CertChallengePutConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling certChallengePutConnect.');
        }

        if (requestParameters.challenge === null || requestParameters.challenge === undefined) {
            throw new runtime.RequiredError('challenge','Required parameter requestParameters.challenge was null or undefined when calling certChallengePutConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connect/cert/challenge`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChallengeToJSON(requestParameters.challenge),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certChallengePutConnect(requestParameters: CertChallengePutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.certChallengePutConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async certDeleteConnectRaw(requestParameters: CertDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling certDeleteConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/cert`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certDeleteConnect(requestParameters: CertDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.certDeleteConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async certGetConnectRaw(requestParameters: CertGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<Cert>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling certGetConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/cert`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CertFromJSON(jsonValue));
    }

    /**
     */
    async certGetConnect(requestParameters: CertGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Cert> {
        const response = await this.certGetConnectRaw(requestParameters, headerExtra);
        return await response.value();
    }

    /**
     */
    async certKeypairDeleteConnectRaw(requestParameters: CertKeypairDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling certKeypairDeleteConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/cert/keypair`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certKeypairDeleteConnect(requestParameters: CertKeypairDeleteConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.certKeypairDeleteConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async certKeypairGetConnectRaw(requestParameters: CertKeypairGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<Keypair>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling certKeypairGetConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        const response = await this.request({
            path: `/connect/cert/keypair`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeypairFromJSON(jsonValue));
    }

    /**
     */
    async certKeypairGetConnect(requestParameters: CertKeypairGetConnectRequest, headerExtra?:{[key:string]:string}): Promise<Keypair> {
        const response = await this.certKeypairGetConnectRaw(requestParameters, headerExtra);
        return await response.value();
    }

    /**
     */
    async certKeypairPutConnectRaw(requestParameters: CertKeypairPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling certKeypairPutConnect.');
        }

        if (requestParameters.keypair === null || requestParameters.keypair === undefined) {
            throw new runtime.RequiredError('keypair','Required parameter requestParameters.keypair was null or undefined when calling certKeypairPutConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connect/cert/keypair`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KeypairToJSON(requestParameters.keypair),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certKeypairPutConnect(requestParameters: CertKeypairPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.certKeypairPutConnectRaw(requestParameters, headerExtra);
    }

    /**
     */
    async certPutConnectRaw(requestParameters: CertPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling certPutConnect.');
        }

        if (requestParameters.cert === null || requestParameters.cert === undefined) {
            throw new runtime.RequiredError('cert','Required parameter requestParameters.cert was null or undefined when calling certPutConnect.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = headerExtra || {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connect/cert`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CertToJSON(requestParameters.cert),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async certPutConnect(requestParameters: CertPutConnectRequest, headerExtra?:{[key:string]:string}): Promise<void> {
        await this.certPutConnectRaw(requestParameters, headerExtra);
    }

}
