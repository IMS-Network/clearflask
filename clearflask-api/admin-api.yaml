openapi: 3.0.0
info:
  title: ClearFlask Admin API
  description: ClearFlask Admin API documentation.
  version: 1.0.0

servers:
  - url: https://admin.api.clearflask.com/v1/project/{projectId}
    description: Production server
    variables:
      projectId:
        description: Project ID of the customer
        default: projectId

components:
  schemas:
    # Conf:
    #   properties:
    #     creditIntake:
    #       description: Can be overriden on individual UserGroup.
    #       $ref: '#/components/schemas/ConfIncomeType'
    # ConfUserGroup:
    #   properties:
    #     id:
    #       type: string
    #     creditIntake:
    #       description: If set, overrides values on project level.
    #       $ref: '#/components/schemas/ConfIncomeType'
    #   required:
    #     - id
    # ConfIncomeType:
    #   properties:
    #     creditsOnFirstSeen:
    #       description: Amount of credits to give each user when first seen.
    #       type: integer
    #     creditsPerPeriod:
    #       description: >-
    #         Amount of credits to give each user per period of time.
    #         Starting time is either first seen, or registration time
    #         if supplied.
    #       type: integer
    #     creditsPeriodInDays:
    #       type: integer
    #       default: 30
    # ConfAppleReceiptValidation:
    #   properties:
    #     allowedBundleIdentifiers:
    #       type: array
    #       items:
    #         type: string
    #     purchaseToCreditMapping:
    #       type: object
    #       additionalProperties:
    #         type: integer
    #   required:
    #     - allowedBundleIdentifiers
    #     - purchaseToCreditMapping
    IdeaSubmission:
      properties:
        id:
          type: string
        authorUserId:
          type: string
        created:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        groupId:
          type: string
        statusId:
          type: string
        tagIds:
          type: array
          items:
            type: string
        creditGoal:
          type: number
      required:
        - id
        - authorUserId
        - created
        - title
        - description
        - groupId
        - statusId
    Idea:
      properties:
        id:
          type: string
        authorUserId:
          type: string
        created:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        groupId:
          type: string
        statusId:
          type: string
        tagIds:
          type: array
          items:
            type: string
        creditGoal:
          type: number
        credits:
          type: number
        funderCount:
          type: integer
        funders:
          $ref: '#/components/schemas/UserSearchResult'
        supporterCount:
          type: integer
        supporters:
          $ref: '#/components/schemas/UserSearchResult'
      required:
        - id
        - authorUserId
        - created
        - title
        - description
        - groupId
        - statusId
        - funderCount
        - funders
        - supporterCount
        - supporters
    User:
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        isAdmin:
          type: boolean
        avatar:
          type: string
      required:
        - id
        - name
        - email
    Transaction:
      properties:
        id:
          type: string
        userId:
          type: string
        created:
          type: string
          format: date-time
        amount:
          type: number
        transactionType:
          type: string
          enum:
            - VoteIdea
            - RefundIdea
            - Purchase
            - Refund
        targetId:
          description: Only set if an Idea is involved
          type: string
        extraDescription:
          type: string
      required:
        - id
        - userId
        - created
        - amount
        - transactionType
    TransactionsResult:
      type: object
      properties:
        transactions:
          $ref: '#/components/schemas/Transaction'
        cursor:
          type: string
      required:
        - transactions
    UserSearchResult:
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        cursor:
          type: string
      required:
        - users
    ErrorResponse:
      type: object
      properties:
        userFacingMessage:
          type: string
  responses:
    NotFound:
      description: >-
        HTTP 404 Not Found
        The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  # TODO /config:
  # TODO /comment:
  /idea:
    post:
      operationId: createIdeaAdmin
      tags:
        - Idea
      parameters:
        - name: idea
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/IdeaSubmission'
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /idea/{ideaId}:
    get:
      operationId: getIdeaAdmin
      tags:
        - Idea
      parameters:
        - name: ideaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Idea'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateIdeaAdmin
      tags:
        - Idea
      parameters:
        - name: ideaId
          in: path
          required: true
          schema:
            type: string
        - name: authorUserId
          in: query
          schema:
            type: string
        - name: created
          in: query
          schema:
            type: string
            format: date-time
        - name: title
          in: query
          schema:
            type: string
        - name: description
          in: query
          schema:
            type: string
        - name: groupId
          in: query
          schema:
            type: string
        - name: statusId
          in: query
          schema:
            type: string
        - name: tagIds
          in: query
          schema:
            type: array
            items:
              type: string
        - name: creditGoal
          in: query
          schema:
            type: number
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteIdeaAdmin
      tags:
        - Idea
      parameters:
        - name: ideaId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /vote/{ideaId}:
    post:
      operationId: createVoteAdmin
      tags:
        - Credit
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
          description: ID of the idea
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User to vote
        - in: query
          name: creditAmount
          schema:
            type: integer
          description: Amount of credits to fund. If not set, only support is given.
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: changeVoteAdmin
      tags:
        - Credit
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
          description: ID of the idea
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User to change vote for
        - in: query
          name: support
          schema:
            type: boolean
          description: Change support vote. If empty, remains unchanged.
        - in: query
          name: creditAmount
          schema:
            type: boolean
          description: Change funding vote. If empty, remains unchanged.
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteVoteAdmin
      tags:
        - Credit
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
          description: ID of the idea
        - in: query
          name: userId
          schema:
            type: string
          required: true
          description: User to delete vote for
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /user:
    get:
      operationId: searchUserAdmin
      tags:
        - User
      summary: Search users
      parameters:
        - name: sortBy
          in: query
          required: true
          schema:
            type: string
            enum:
              - Created
              - AvailableFunds
              - SupportVotes
              - FundingVotes
              - FundedAmount
              - LastActive
        - name: sortOrder
          in: query
          required: true
          schema:
            type: string
            enum:
              - Asc
              - Desc
        - name: filterAdminOnly
          in: query
          schema:
            type: boolean
        - name: searchQuery
          in: query
          description: Searches name and email for a match.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResult'
    post:
      operationId: registerUserAdmin
      tags:
        - User
      summary: Register a new user
      parameters:
        - name: user
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
  /user/{userId}:
    get:
      operationId: getUserAdmin
      tags:
        - User
      summary: Get a new user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateUserAdmin
      tags:
        - User
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
        - name: email
          in: query
          schema:
            type: string
        - name: isAdmin
          in: query
          schema:
            type: boolean
        - name: avatar
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteUserAdmin
      tags:
        - User
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /transactions/{userId}:
    get:
      operationId: searchTransactionsAdmin
      tags:
        - Credit
      summary: Get transaction history
      description: Get detailed history of all transactions for user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          description: Optionally filter 
        - in: query
          name: startTime
          schema:
            type: string
            format: date-time
          description: >-
            Search start time. Results after this will be returned.
        - in: query
          name: endTime
          schema:
            type: string
            format: date-time
          description: >-
            Search end time. Results prior to this will be returned.
        - in: query
          name: limit
          schema:
            type: integer
          description: >-
            Optionally set a limit on how many results to return.
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor to fetch next set of results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionsResult'
        '404':
          $ref: '#/components/responses/NotFound'
