openapi: 3.0.0
info:
  title: ClearFlask API
  description: ClearFlask API documentation.
  version: 1.0.0

servers:
  - url: https://client.api.clearflask.com/v1/project/{projectId}
    description: Production server
    variables:
      projectId:
        description: Project ID of the customer
        default: projectId

externalDocs:
  url: https://clearflask.com/docs

components:
  schemas:
    Conf:
      properties:
        name:
          type: string
        logoUrl:
          description: Location of the logo to display.
          type: string
        pages:
          $ref: '#/components/schemas/ConfViewPages'
        ideaGroups:
          type: array
          items:
            $ref: '#/components/schemas/ConfIdeaGroup'
        ideaStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ConfIdeaStatus'
        ideaTags:
          type: array
          items:
            $ref: '#/components/schemas/ConfIdeaTag'
        defaultIdeaStatusId:
          description: >-
            Idea status to assign if any on newly created ideas.
            Can be overriden in group.
          type: string
        settableIdeaTagIdsOnCreate:
          description: >-
            In addition to group level idea tags,
            these tags can also be added by user
            when creating an idea.
          type: array
          items:
            type: string
        supportType:
          description: Can be overriden inside IdeaGroup
          $ref: '#/components/schemas/ConfSupportType'
        creditType:
          type: object
          properties:
            prefix:
              type: string
            suffix:
              type: string
            minUnit:
              type: number
            significantDigits:
              type: integer
          required:
            - minUnit
            - significantDigits
        defaultIdeaTagIds:
          type: array
          items:
            type: string
        defaultIdeaVisibility:
          $ref: '#/components/schemas/ConfIdeaVisibility'
        settableIdeaVisibility:
          type: boolean
      required:
        - name
        - pages
        - ideaGroups
        - ideaStatuses
        - supportType
    ConfIdeaGroup:
      properties:
        id:
          type: string
        parentIdeaGroupId:
          type: string
        name:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        supportType:
          description: If set, overrides project level support type
          $ref: '#/components/schemas/ConfSupportType'
        defaultIdeaStatusId:
          description: >-
            Idea status to assign on newly created ideas.
            If not set, project level default applies.
          type: string
        defaultIdeaTagIds:
          type: array
          items:
            type: string
        defaultIdeaVisibility:
          $ref: '#/components/schemas/ConfIdeaVisibility'
        settableIdeaVisibility:
          type: boolean
        settableIdeaTagIdsOnCreate:
          description: >-
            In addition to project level idea tags,
            these tags can also be added by user
            when creating an idea.
          type: array
          items:
            type: string
      required:
        - id
        - name
    ConfIdeaVisibility:
      type: string
      enum:
        - Public
        - Private
    ConfIdeaStatus:
      properties:
        id:
          type: string
        nextStatusIds:
          type: array
          items:
            type: object
            properties:
              nextStatusId:
                type: string
              transitionText:
                type: string
            required:
              - nextStatusId
        name:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        allowFunding:
          type: boolean
        allowVoting:
          type: boolean
        allowIdeaEdits:
          type: boolean
        allowComments:
          type: boolean
      required:
        - id
        - name
    ConfIdeaTag:
      properties:
        id:
          type: string
        name:
          type: string
        color:
          $ref: '#/components/schemas/Color'
      required:  
        - id
        - name
    Color:
      type: string
      pattern: '#([0-9a-f]{3}){1,2}'
    ConfViewPages:
      type: array
      items:
        $ref: '#/components/schemas/ConfViewPage'
    ConfViewPage:
      description: Defines page content. All parts are optional.
      properties:
        urlName:
          description: >-
            Url path of page. Leave empty for main page.
          type: string
        name:
          description: >-
            Page name visible in menu and in url path.
          type: string
        panels:
          type: array
          items:
            $ref: '#/components/schemas/ConfViewPanel'
        board:
          $ref: '#/components/schemas/ConfViewBoard'
        explorer:
          $ref: '#/components/schemas/ConfViewIdeaExplorer'
      required:
        - urlName
        - name
    ConfViewBoard:
      properties:
        titleOpt:
          type: string
        panels:
          type: array
          items:
            $ref: '#/components/schemas/ConfViewPanel'
      required:
        - panels
    ConfViewPanel:
      properties:
        titleOpt:
          type: string
        hideIfEmpty:
          type: boolean
        ideaList:
          $ref: '#/components/schemas/ConfViewIdeaSearchQuery'
        enableSearchByGroup:
          type: boolean
        enableSearchByStatus:
          type: boolean
        enableSearchByTag:
          type: boolean
      required:
        - ideaList
    ConfViewIdeaExplorer:
      properties:
        titleOpt:
          type: string
        ideaList:
          $ref: '#/components/schemas/ConfViewIdeaSearchQuery'
      required:
        - ideaList
    ConfViewIdeaSearchQuery:
      properties:
        searchKey:
          type: string
          description: >-
            Unique key describing this specific search query.
            Used for deduping requests, caching.
        sortBy:
          $ref: '#/components/schemas/SortBy'
        filterIdeaGroupIds:
          type: array
          items:
            type: string
        filterIdeaStatusIds:
          type: array
          items:
            type: string
        filterIdeaTagIds:
          type: array
          items:
            type: string
        searchText:
          type: string
        limit:
          description: >-
            Optionally set a limit on how many results to return.
            Between 10 and 50.
          type: integer
      required:
        - searchKey
        - sortBy
    ConfSupportType:
      type: string
      enum:
        - FundingOnly
        - VotingOnly
        - FundingVoting
        - None
      default: None
    SortBy:
      type: string
      enum: 
        - Trending
        - Top
        - New
    IdeaSubmission:
      properties:
        title:
          type: string
        description:
          type: string
        groupId:
          type: string
        tagIds:
          type: array
          items:
            type: string
      required:
        - title
        - description
        - groupId
    Idea:
      properties:
        id:
          type: string
        authorUserId:
          type: string
        created:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        groupId:
          type: string
        statusId:
          type: string
        tagIds:
          type: array
          items:
            type: string
        credits:
          type: number
        creditGoal:
          type: number
        funderCount:
          type: integer
        supporterCount:
          type: integer
        myCredits:
          type: number
        mySupport:
          type: boolean
      required:
        - id
        - authorUserId
        - created
        - title
        - description
        - groupId
        - statusId
    CommentSubmission:
      properties:
        parentCommentId:
          type: string
        content:
          type: string
      required:
        - authorUserId
        - created
        - comment
    Comment:
      properties:
        id:
          type: string
        parentCommentId:
          type: string
        authorUserId:
          type: string
        created:
          type: string
          format: date-time
        content:
          type: string
      required:
        - id
        - authorUserId
        - created
        - comment
    User:
      properties:
        id:
          type: string
        name:
          type: string
        isAdmin:
          type: boolean
        avatar:
          type: string
      required:
        - id
        - name
    Credit:
      properties:
        creditAmount:
          type: number
      required:
        - creditAmount
    Transaction:
      properties:
        id:
          type: string
        created:
          type: string
          format: date-time
        amount:
          type: number
        transactionType:
          type: string
          enum:
            - VoteIdea
            - RefundIdea
            - Purchase
            - Refund
        targetId:
          description: Only set if an Idea is involved
          type: string
        extraDescription:
          type: string
      required:
        - id
        - created
        - amount
        - transactionType
    TransactionsResult:
      type: object
      properties:
        transactions:
          $ref: '#/components/schemas/Transaction'
        cursor:
          type: string
      required:
        - transactions
    VoteIdeaResult:
      type: object
      properties:
        idea:
          $ref: '#/components/schemas/Idea'
        transaction:
          $ref: '#/components/schemas/Transaction'
        availableCredit:
          $ref: '#/components/schemas/Credit'
      required:
        - idea
    AuthSuccessResult:
      properties:
        userId:
          $ref: '#/components/schemas/User'
        availableCredit:
          $ref: '#/components/schemas/Credit'
      required:
        - user
    ErrorResponse:
      type: object
      properties:
        userFacingMessage:
          type: string
  responses:
    NotFound:
      description: >-
        HTTP 404 Not Found
        The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: >-
        HTTP 403 Forbidden
        Use when access is not allowed to a particular resource
        NotFound is also acceptable when the existence of a
        resource must be protected.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: >-
        HTTP 401 Unauthorized
        Used during login/bind to indicate the authentication was
        not successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ConfigChanged:
      description: >-
        HTTP 412 Precondition Failed
        Use only when client needs to reload the App Configuration.
        In a case where a request does not make sense based on App
        Configuration. Client is expected to reload immediately.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

paths:
  /config:
    get:
      operationId: getConfig
      tags:
        - Config
      summary: Get configuration
      description: Fetches complete configuration for this app/widget.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conf'
  /idea:
    get:
      operationId: getIdeas
      tags:
        - Idea
      summary: Fetch list of ideas based on criteria
      description: >-
        Fetch list of ideas based on following criteria.
        Supports sorting, tag filtering and search.
      parameters:
        - in: query
          name: searchQuery
          required: true
          schema:
            $ref: '#/components/schemas/ConfViewIdeaSearchQuery'
          description: Cursor to fetch next set of results
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor to fetch next set of results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                title: Ideas
                type: object
                properties:
                  ideas:
                    type: array
                    items:
                      $ref: '#/components/schemas/Idea'
                  cursor:
                    type: string
                required:
                  - ideas
    post:
      operationId: createIdea
      tags:
        - Idea
      summary: Submit new idea
      parameters:
        - in: query
          name: groupId
          schema:
            type: string
          required: true
        - in: query
          name: title
          schema:
            type: string
          required: true
        - in: query
          name: description
          schema:
            type: string
        - in: query
          name: creditsToFund
          schema:
            type: number
        - in: query
          name: tagIds
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Idea'
        '404':
          $ref: '#/components/responses/NotFound'
  /idea/{ideaId}:
    get:
      operationId: getIdea
      tags:
        - Idea
      summary: Get Idea
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Idea'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateIdea
      tags:
        - Idea
      summary: Delete idea
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: description
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteIdea
      tags:
        - Idea
      summary: Delete idea
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /idea/{ideaId}/comment:
    get:
      operationId: getComments
      tags:
        - Comment
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      operationId: createComment
      tags:
        - Comment
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
        - in: query
          name: comment
          schema:
            $ref: '#/components/schemas/CommentSubmission'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
  /idea/{ideaId}/comment/{commentId}:
    patch:
      operationId: updateComment
      tags:
        - Comment
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
        - in: path
          name: commentId
          schema:
            type: string
          required: true
        - in: query
          name: content
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteComment
      tags:
        - Comment
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
        - in: path
          name: commentId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /vote/{ideaId}:
    post:
      operationId: createVote
      tags:
        - Credit
      summary: Vote Idea
      description: Submit credits or support for idea
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
          description: ID of the idea
        - in: query
          name: creditAmount
          schema:
            type: integer
          description: Amount of credits to fund. If not set, only support is given.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteIdeaResult'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: changeVote
      tags:
        - Credit
      summary: Change Vote Idea
      description: Remove support for idea
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
          description: ID of the idea
        - in: query
          name: support
          schema:
            type: boolean
          description: Change support vote. If empty, remains unchanged.
        - in: query
          name: creditAmount
          schema:
            type: boolean
          description: Change funding vote. If empty, remains unchanged.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteIdeaResult'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: deleteVote
      tags:
        - Credit
      summary: Unvote Idea
      description: Remove support for idea
      parameters:
        - in: path
          name: ideaId
          schema:
            type: string
          required: true
          description: ID of the idea
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteIdeaResult'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/{userId}:
    get:
      operationId: getUser
      tags:
        - User
      summary: Get user
      description: Fetches user information.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to return.
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateUser
      tags:
        - User
      summary: Update user account information
      parameters:
        - name: userId
          in: path
          description: User ID.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: Name of the user to be visible by others.
          schema:
            type: string
        - name: avatar
          in: query
          description: Url of the avatar to use
          schema:
            type: string
        - name: email
          in: query
          description: Email address of the user
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          $ref: '#/components/responses/NotFound'
  /user:
    post:
      operationId: registerUser
      tags:
        - User
      summary: Register new user
      parameters:
        - name: name
          in: query
          description: Name of the user to be visible by others.
          schema:
            type: string
        - name: avatar
          in: query
          description: Url of the avatar to use
          schema:
            type: string
        - name: email
          in: query
          required: true
          description: Email address of the user
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResult'
  /user/login:
    post:
      operationId: loginUser
      tags:
        - User
      summary: Login user
      parameters:
        - name: email
          in: query
          required: true
          description: Email
          schema:
            type: string
        - name: email
          in: query
          required: true
          description: Password
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResult'
        '401':
          $ref: '#/components/schemas/Unauthorized'
  /user/bind:
    post:
      operationId: bindUser
      tags:
        - User
      summary: >-
        Bind already logged in user either with
          - Existing server side cookie token
          - Authentication token supplied externally
      parameters:
        - name: token
          in: query
          description: Token supplied externally
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResult'
        '401':
          $ref: '#/components/schemas/Unauthorized'
  /transactions/{userId}:
    get:
      operationId: getTransactions
      tags:
        - Credit
      summary: Get transaction history
      description: Get detailed history of all transactions for user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
        - in: query
          name: limit
          schema:
            type: integer
          description: >-
            Optionally set a limit on how many results to return.
            Between 10 and 50.
        - in: query
          name: cursor
          schema:
            type: string
          description: Cursor to fetch next set of results
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '404':
          $ref: '#/components/responses/NotFound'
