components:
  schemas:
    IdeaSearch:
      x-clearflask-prop: { order: 100, name: 'Filter', description: 'Custom filter to limit the ideas shown to the user' }
      type: object
      properties:
        sortBy:
          x-clearflask-prop: { order: 2, name: 'Sort', description: 'Display ideas by this sort order', defaultValue: 'Trending' }
          type: string
          enum:
            - Trending
            - Top
            - New
        filterCategoryIds:
          x-clearflask-prop: { order: 1, name: 'Content', description: 'Display only posts from these categories' }
          x-clearflask-prop-link: { idPropName: 'categoryId', linkPath: ['content', 'categories'], displayPropName: 'name', colorPropName: 'color'}
          type: array
          items:
            type: string
        filterStatusIds:
          x-clearflask-prop: { order: 3, name: 'Status', description: 'Display only ideas having these statuses' }
          x-clearflask-prop-link: { idPropName: 'statusId', linkPath: ['content', 'categories', '<$>', 'workflow', 'statuses'], displayPropName: 'name', colorPropName: 'color', filterPath: ['.', 'filterCategoryIds'], filterIdPropName: 'categoryId', filterShowAllIfNone: true}
          type: array
          items:
            type: string
        filterTagIds:
          x-clearflask-prop: { order: 4, name: 'Tag', description: 'Display only ideas having these tags' }
          x-clearflask-prop-link: { idPropName: 'tagId', linkPath: ['content', 'categories', '<$>', 'tagging', 'tags'], displayPropName: 'name', colorPropName: 'color', filterPath: ['.', 'filterCategoryIds'], filterIdPropName: 'categoryId', filterShowAllIfNone: true}
          type: array
          items:
            type: string
        searchText:
          x-clearflask-prop: { order: 5, name: 'Search query', description: 'Filter results matching this search term' }
          type: string
        fundedByMeAndActive:
          x-clearflask-hide: true
          x-clearflask-prop: { order: 6, name: 'Funded by me', description: 'Ideas funded by me and can be adjust' }
          type: boolean
        limit:
          x-clearflask-prop: { order: 7, name: 'Limit', description: 'Optionally set a limit on how many results to return' }
          minimum: 1
          maximum: 50
          type: integer
          format: int64
    IdeaSearchAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaSearch'
        - type: object
          properties:
            filterCreatedStart:
              type: string
              format: date-time
            filterCreatedEnd:
              type: string
              format: date-time
            filterLastActivityStart:
              type: string
              format: date-time
            filterLastActivityEnd:
              type: string
              format: date-time
          required:
    Idea:
      type: object
      properties:
        ideaId:
          type: string
        authorUserId:
          type: string
        authorName:
          type: string
        authorIsMod:
          type: boolean
        created:
          type: string
          format: date-time
        title:
          type: string
        description:
          type: string
        response:
          type: string
        responseAuthorUserId:
          type: string
        responseAuthorName:
          type: string
        categoryId:
          type: string
        statusId:
          type: string
        tagIds:
          type: array
          items:
            type: string
        commentCount:
          description: Total comment count
          type: integer
          format: int64
        childCommentCount:
          description: Count of immediate child comments only
          type: integer
          format: int64
        funded:
          type: integer
          format: int64
        fundGoal:
          type: integer
          format: int64
        fundersCount:
          type: integer
          format: int64
        voteValue:
          type: integer
          format: int64
        expressionsValue:
          description: Combined value of all expressions. Not the expression count.
          type: number
          format: double
        expressions:
          description: Mapping expression display to count
          type: object
          additionalProperties:
            type: integer
            format: int64
      required:
        - ideaId
        - authorUserId
        - created
        - title
        - categoryId
        - tagIds
        - commentCount
        - childCommentCount
    IdeaWithVote:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/Idea'
        - type: object
          required:
            - vote
          properties:
            vote:
              $ref: 'api-vote.yaml#/components/schemas/IdeaVote'
    IdeaCreate:
      type: object
      properties:
        authorUserId:
          type: string
        title:
          type: string
        description:
          type: string
        categoryId:
          type: string
        tagIds:
          type: array
          items:
            type: string
      required:
        - authorUserId
        - title
        - categoryId
        - tagIds
    IdeaCreateAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaCreate'
        - type: object
          properties:
            response:
              type: string
            statusId:
              type: string
            fundGoal:
              type: integer
              format: int64
    IdeaUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    IdeaUpdateAdmin:
      allOf:
        - $ref: 'api-idea.yaml#/components/schemas/IdeaUpdate'
        - type: object
          properties:
            response:
              type: string
            statusId:
              type: string
            tagIds:
              type: array
              items:
                type: string
            fundGoal:
              type: integer
              format: int64
            suppressNotifications:
              description: Suppresses notifications if status or response was changed
              type: boolean

/project/{projectId}/ideasearch:
  post:
    operationId: ideaSearch
    tags: [Idea]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: cursor
      in: query
      schema:
        $ref: 'api-client.yaml#/components/schemas/Cursor'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaSearch'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: IdeaWithVoteSearchResponse
              type: object
              properties:
                cursor:
                  $ref: 'api-client.yaml#/components/schemas/Cursor'
                results:
                  type: array
                  items:
                    $ref: 'api-idea.yaml#/components/schemas/IdeaWithVote'
              required:
                - results

/project/{projectId}/idea:
  post:
    operationId: ideaCreate
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaCreate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaWithVote'
/project/{projectId}/idea/{ideaId}:
  get:
    operationId: ideaGet
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaWithVote'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  patch:
    operationId: ideaUpdate
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaUpdate'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/Idea'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  delete:
    operationId: ideaDelete
    tags: [Idea]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/admin/idea/search:
  post:
    operationId: ideaSearchAdmin
    tags: [IdeaAdmin]
    parameters:
    - name: projectId
      in: path
      required: true
      schema:
        type: string
    - name: cursor
      in: query
      schema:
        $ref: 'api-client.yaml#/components/schemas/Cursor'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaSearchAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              title: IdeaSearchResponse
              type: object
              properties:
                cursor:
                  $ref: 'api-client.yaml#/components/schemas/Cursor'
                results:
                  type: array
                  items:
                    $ref: 'api-idea.yaml#/components/schemas/Idea'
              required:
                - results
/project/{projectId}/admin/idea:
  post:
    operationId: ideaCreateAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaCreateAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/IdeaWithVote'
  delete:
    operationId: ideaDeleteBulkAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaSearchAdmin'
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
/project/{projectId}/admin/idea/{ideaId}:
  get:
    operationId: ideaGetAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/Idea'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  patch:
    operationId: ideaUpdateAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: 'api-idea.yaml#/components/schemas/IdeaUpdateAdmin'
    responses:
      '200':
        content:
          application/json:
            schema:
              $ref: 'api-idea.yaml#/components/schemas/Idea'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
  delete:
    operationId: ideaDeleteAdmin
    tags: [IdeaAdmin]
    parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: string
      - name: ideaId
        in: path
        required: true
        schema:
          type: string
    responses:
      '200':
        $ref: 'api-client.yaml#/components/responses/Ok'
      '404':
        $ref: 'api-client.yaml#/components/responses/NotFound'
